    {
       "scope": "source.lua",
     
       "completions":
       [
           
            { "trigger":"Combat()", "contents": "Combat()" },
            { "trigger":"Combat.new()", "contents": "Combat.new()" },
            { "trigger":"combat:execute(creature, variant)", "contents": "combat:execute(creature, variant)" },
            { "trigger":"combat:setArea(area)", "contents": "combat:setArea(area)" },
            { "trigger":"combat:setCallBack(key, function)", "contents": "combat:setCallBack(key, function)" },
            { "trigger":"combat:setCondition(condition)", "contents": "combat:setCondition(condition)" },
            { "trigger":"combat:setFormula(type, mina, minb, maxa, maxb)", "contents": "combat:setFormula(type, mina, minb, maxa, maxb)" },
            { "trigger":"combat:setParameter(key, value)", "contents": "combat:setParameter(key, value)" },
            { "trigger":"Condition(conditionType[, conditionId = CONDITIONID_COMBAT])", "contents": "Condition(conditionType[, conditionId = CONDITIONID_COMBAT])" },
            { "trigger":"Condition.new(conditionType[, conditionId = CONDITIONID_COMBAT])", "contents": "Condition.new(conditionType[, conditionId = CONDITIONID_COMBAT])" },
            { "trigger":"condition:addDamage(rounds, time, value)", "contents": "condition:addDamage(rounds, time, value)" },
            { "trigger":"condition:addOutfit(lookTypeEx, lookType, lookHead, lookBody, lookLegs, lookFeet[, lookAddons[, lookMount]])", "contents": "condition:addOutfit(lookTypeEx, lookType, lookHead, lookBody, lookLegs, lookFeet[, lookAddons[, lookMount]])" },
            { "trigger":"condition:addOutfit(outfit)", "contents": "condition:addOutfit(outfit)" },
            { "trigger":"condition:clone()", "contents": "condition:clone()" },
            { "trigger":"condition:getEndTime()", "contents": "condition:getEndTime()" },
            { "trigger":"condition:getIcons()", "contents": "condition:getIcons()" },
            { "trigger":"condition:getId()", "contents": "condition:getId()" },
            { "trigger":"condition:getSubId()", "contents": "condition:getSubId()" },
            { "trigger":"condition:getTicks()", "contents": "condition:getTicks()" },
            { "trigger":"condition:getType()", "contents": "condition:getType()" },
            { "trigger":"condition:setFormula(mina, minb, maxa, maxb)", "contents": "condition:setFormula(mina, minb, maxa, maxb)" },
            { "trigger":"condition:setParameter(key, value)", "contents": "condition:setParameter(key, value)" },
            { "trigger":"condition:setTicks(ticks)", "contents": "condition:setTicks(ticks)" },
            { "trigger":"Container(itemId[, position])", "contents": "Container(itemId[, position])" },
            { "trigger":"Container(uid)", "contents": "Container(uid)" },
            { "trigger":"Container.new(itemId[, position])", "contents": "Container.new(itemId[, position])" },
            { "trigger":"Container.new(uid)", "contents": "Container.new(uid)" },
            { "trigger":"container:addItem(itemId[, count/subType = 1])", "contents": "container:addItem(itemId[, count/subType = 1])" },
            { "trigger":"container:addItemEx(item)", "contents": "container:addItemEx(item)" },
            { "trigger":"container:getCapacity()", "contents": "container:getCapacity()" },
            { "trigger":"container:getEmptySlots([recursive = false])", "contents": "container:getEmptySlots([recursive = false])" },
            { "trigger":"container:getItem(index)", "contents": "container:getItem(index)" },
            { "trigger":"container:getSize()", "contents": "container:getSize()" },
            { "trigger":"container:hasItem(item)", "contents": "container:hasItem(item)" },
            { "trigger":"Creature(id/name)", "contents": "Creature(id/name)" },
            { "trigger":"Creature.new(id/name)", "contents": "Creature.new(id/name)" },
            { "trigger":"creature:addCondition(condition[, force = false])", "contents": "creature:addCondition(condition[, force = false])" },
            { "trigger":"creature:addHealth(healthChange)", "contents": "creature:addHealth(healthChange)" },
            { "trigger":"creature:addMana(manaChange[, animationOnLoss = false])", "contents": "creature:addMana(manaChange[, animationOnLoss = false])" },
            { "trigger":"creature:canSee(position)", "contents": "creature:canSee(position)" },
            { "trigger":"creature:canSeeCreature(creature)", "contents": "creature:canSeeCreature(creature)" },
            { "trigger":"creature:getBaseSpeed()", "contents": "creature:getBaseSpeed()" },
            { "trigger":"creature:getCondition(conditionType[, conditionId = CONDITIONID_COMBAT[, subId = 0]])", "contents": "creature:getCondition(conditionType[, conditionId = CONDITIONID_COMBAT[, subId = 0]])" },
            { "trigger":"creature:getDamageMap()", "contents": "creature:getDamageMap()" },
            { "trigger":"creature:getDescription(distance)", "contents": "creature:getDescription(distance)" },
            { "trigger":"creature:getDirection()", "contents": "creature:getDirection()" },
            { "trigger":"creature:getFollowCreature()", "contents": "creature:getFollowCreature()" },
            { "trigger":"creature:getHealth()", "contents": "creature:getHealth()" },
            { "trigger":"creature:getId()", "contents": "creature:getId()" },
            { "trigger":"creature:getLight()", "contents": "creature:getLight()" },
            { "trigger":"creature:getMana()", "contents": "creature:getMana()" },
            { "trigger":"creature:getMaster()", "contents": "creature:getMaster()" },
            { "trigger":"creature:getMaxHealth()", "contents": "creature:getMaxHealth()" },
            { "trigger":"creature:getMaxMana()", "contents": "creature:getMaxMana()" },
            { "trigger":"creature:getName()", "contents": "creature:getName()" },
            { "trigger":"creature:getOutfit()", "contents": "creature:getOutfit()" },
            { "trigger":"creature:getPosition()", "contents": "creature:getPosition()" },
            { "trigger":"creature:getSpeed()", "contents": "creature:getSpeed()" },
            { "trigger":"creature:getSummons()", "contents": "creature:getSummons()" },
            { "trigger":"creature:getTarget()", "contents": "creature:getTarget()" },
            { "trigger":"creature:getTile()", "contents": "creature:getTile()" },
            { "trigger":"creature:isCreature()", "contents": "creature:isCreature()" },
            { "trigger":"creature:isHealthHidden()", "contents": "creature:isHealthHidden()" },
            { "trigger":"creature:isInGhostMode()", "contents": "creature:isInGhostMode()" },
            { "trigger":"creature:isItem()", "contents": "creature:isItem()" },
            { "trigger":"creature:isMonster()", "contents": "creature:isMonster()" },
            { "trigger":"creature:isNpc()", "contents": "creature:isNpc()" },
            { "trigger":"creature:isPlayer()", "contents": "creature:isPlayer()" },
            { "trigger":"creature:isRemoved()", "contents": "creature:isRemoved()" },
            { "trigger":"creature:registerEvent(name)", "contents": "creature:registerEvent(name)" },
            { "trigger":"creature:remove()", "contents": "creature:remove()" },
            { "trigger":"creature:removeCondition(conditionType[, conditionId = CONDITIONID_COMBAT[, subId = 0[, force = false]]])", "contents": "creature:removeCondition(conditionType[, conditionId = CONDITIONID_COMBAT[, subId = 0[, force = false]]])" },
            { "trigger":"creature:say(text, type[, ghost = false[, target = nullptr[, position]]])", "contents": "creature:say(text, type[, ghost = false[, target = nullptr[, position]]])" },
            { "trigger":"creature:setDirection(direction)", "contents": "creature:setDirection(direction)" },
            { "trigger":"creature:setDropLoot(doDrop)", "contents": "creature:setDropLoot(doDrop)" },
            { "trigger":"creature:setFollowCreature(followedCreature)", "contents": "creature:setFollowCreature(followedCreature)" },
            { "trigger":"creature:setHiddenHealth(hide)", "contents": "creature:setHiddenHealth(hide)" },
            { "trigger":"creature:setLight(color, level)", "contents": "creature:setLight(color, level)" },
            { "trigger":"creature:setMaster(master)", "contents": "creature:setMaster(master)" },
            { "trigger":"creature:setMaxHealth(maxHealth)", "contents": "creature:setMaxHealth(maxHealth)" },
            { "trigger":"creature:setOutfit(outfit)", "contents": "creature:setOutfit(outfit)" },
            { "trigger":"creature:setTarget(target)", "contents": "creature:setTarget(target)" },
            { "trigger":"creature:teleportTo(position[, pushMovement = false])", "contents": "creature:teleportTo(position[, pushMovement = false])" },
            { "trigger":"creature:unregisterEvent(name)", "contents": "creature:unregisterEvent(name)" },
            { "trigger":"Game.createItem(itemId, count[, position])", "contents": "Game.createItem(itemId, count[, position])" },
            { "trigger":"Game.createMonster(monsterName, position[, extended = false[, force = false]])", "contents": "Game.createMonster(monsterName, position[, extended = false[, force = false]])" },
            { "trigger":"Game.createNpc(npcName, position[, extended = false[, force = false]])", "contents": "Game.createNpc(npcName, position[, extended = false[, force = false]])" },
            { "trigger":"Game.getExperienceStage(level)", "contents": "Game.getExperienceStage(level)" },
            { "trigger":"Game.getGameState()", "contents": "Game.getGameState()" },
            { "trigger":"Game.getMonsterCount()", "contents": "Game.getMonsterCount()" },
            { "trigger":"Game.getNpcCount()", "contents": "Game.getNpcCount()" },
            { "trigger":"Game.getPlayerCount()", "contents": "Game.getPlayerCount()" },
            { "trigger":"Game.getPlayers()", "contents": "Game.getPlayers()" },
            { "trigger":"Game.getReturnMessage(value)", "contents": "Game.getReturnMessage(value)" },
            { "trigger":"Game.getSpectators(position[, multifloor = false[, onlyPlayer = false[, minRangeX = 0[, maxRangeX = 0[, minRangeY = 0[, maxRangeY = 0]]]]]])", "contents": "Game.getSpectators(position[, multifloor = false[, onlyPlayer = false[, minRangeX = 0[, maxRangeX = 0[, minRangeY = 0[, maxRangeY = 0]]]]]])" },
            { "trigger":"Game.getWorldType()", "contents": "Game.getWorldType()" },
            { "trigger":"Game.loadMap(path)", "contents": "Game.loadMap(path)" },
            { "trigger":"Game.setGameState(state)", "contents": "Game.setGameState(state)" },
            { "trigger":"Game.setWorldType(type)", "contents": "Game.setWorldType(type)" },
            { "trigger":"Game.startRaid(raidName)", "contents": "Game.startRaid(raidName)" },
            { "trigger":"Group(id)", "contents": "Group(id)" },
            { "trigger":"Group.new(id)", "contents": "Group.new(id)" },
            { "trigger":"group:getAccess()", "contents": "group:getAccess()" },
            { "trigger":"group:getFlags()", "contents": "group:getFlags()" },
            { "trigger":"group:getId()", "contents": "group:getId()" },
            { "trigger":"group:getMaxDepotItems()", "contents": "group:getMaxDepotItems()" },
            { "trigger":"group:getMaxVipEntries()", "contents": "group:getMaxVipEntries()" },
            { "trigger":"group:getName()", "contents": "group:getName()" },
            { "trigger":"Guild(id)", "contents": "Guild(id)" },
            { "trigger":"Guild.new(id)", "contents": "Guild.new(id)" },
            { "trigger":"guild:addMember(player)", "contents": "guild:addMember(player)" },
            { "trigger":"guild:addRank(id, name, level)", "contents": "guild:addRank(id, name, level)" },
            { "trigger":"guild:getId()", "contents": "guild:getId()" },
            { "trigger":"guild:getMembersOnline()", "contents": "guild:getMembersOnline()" },
            { "trigger":"guild:getMotd()", "contents": "guild:getMotd()" },
            { "trigger":"guild:getName()", "contents": "guild:getName()" },
            { "trigger":"guild:getRankById(id)", "contents": "guild:getRankById(id)" },
            { "trigger":"guild:getRankByLevel(level)", "contents": "guild:getRankByLevel(level)" },
            { "trigger":"guild:removeMember(player)", "contents": "guild:removeMember(player)" },
            { "trigger":"guild:setMotd(motd)", "contents": "guild:setMotd(motd)" },
            { "trigger":"House(id)", "contents": "House(id)" },
            { "trigger":"House.new(id)", "contents": "House.new(id)" },
            { "trigger":"house:getAccessList(listId)", "contents": "house:getAccessList(listId)" },
            { "trigger":"house:getBedCount()", "contents": "house:getBedCount()" },
            { "trigger":"house:getBeds()", "contents": "house:getBeds()" },
            { "trigger":"house:getDoorCount()", "contents": "house:getDoorCount()" },
            { "trigger":"house:getDoors()", "contents": "house:getDoors()" },
            { "trigger":"house:getExitPosition()", "contents": "house:getExitPosition()" },
            { "trigger":"house:getId()", "contents": "house:getId()" },
            { "trigger":"house:getName()", "contents": "house:getName()" },
            { "trigger":"house:getOwnerGuid()", "contents": "house:getOwnerGuid()" },
            { "trigger":"house:getRent()", "contents": "house:getRent()" },
            { "trigger":"house:getTileCount()", "contents": "house:getTileCount()" },
            { "trigger":"house:getTiles()", "contents": "house:getTiles()" },
            { "trigger":"house:getTown()", "contents": "house:getTown()" },
            { "trigger":"house:setAccessList(listId, list)", "contents": "house:setAccessList(listId, list)" },
            { "trigger":"house:setOwnerGuid(guid)", "contents": "house:setOwnerGuid(guid)" },
            { "trigger":"Item(uid)", "contents": "Item(uid)" },
            { "trigger":"Item.new(uid)", "contents": "Item.new(uid)" },
            { "trigger":"item:clone()", "contents": "item:clone()" },
            { "trigger":"item:decay()", "contents": "item:decay()" },
            { "trigger":"item:getActionId()", "contents": "item:getActionId()" },
            { "trigger":"item:getArticle()", "contents": "item:getArticle()" },
            { "trigger":"item:getAttribute(key)", "contents": "item:getAttribute(key)" },
            { "trigger":"item:getCharges()", "contents": "item:getCharges()" },
            { "trigger":"item:getCount()", "contents": "item:getCount()" },
            { "trigger":"item:getDescription(distance)", "contents": "item:getDescription(distance)" },
            { "trigger":"item:getFluidType()", "contents": "item:getFluidType()" },
            { "trigger":"item:getId()", "contents": "item:getId()" },
            { "trigger":"item:getName()", "contents": "item:getName()" },
            { "trigger":"item:getPluralName()", "contents": "item:getPluralName()" },
            { "trigger":"item:getPosition()", "contents": "item:getPosition()" },
            { "trigger":"item:getSubType()", "contents": "item:getSubType()" },
            { "trigger":"item:getTile()", "contents": "item:getTile()" },
            { "trigger":"item:getType()", "contents": "item:getType()" },
            { "trigger":"item:getUniqueId()", "contents": "item:getUniqueId()" },
            { "trigger":"item:isCreature()", "contents": "item:isCreature()" },
            { "trigger":"item:isItem()", "contents": "item:isItem()" },
            { "trigger":"item:moveTo(position)", "contents": "item:moveTo(position)" },
            { "trigger":"item:remove([count = -1])", "contents": "item:remove([count = -1])" },
            { "trigger":"item:removeAttribute(key)", "contents": "item:removeAttribute(key)" },
            { "trigger":"item:setActionId(actionId)", "contents": "item:setActionId(actionId)" },
            { "trigger":"item:setAttribute(key, value)", "contents": "item:setAttribute(key, value)" },
            { "trigger":"item:split([count = 1])", "contents": "item:split([count = 1])" },
            { "trigger":"item:transform(itemId[, count/subType = -1])", "contents": "item:transform(itemId[, count/subType = -1])" },
            { "trigger":"ItemType(id or name)", "contents": "ItemType(id or name)" },
            { "trigger":"ItemType.new(id or name)", "contents": "ItemType.new(id or name)" },
            { "trigger":"itemType:getArmor()", "contents": "itemType:getArmor()" },
            { "trigger":"itemType:getArticle()", "contents": "itemType:getArticle()" },
            { "trigger":"itemType:getAttack()", "contents": "itemType:getAttack()" },
            { "trigger":"itemType:getCapacity()", "contents": "itemType:getCapacity()" },
            { "trigger":"itemType:getDecayId()", "contents": "itemType:getDecayId()" },
            { "trigger":"itemType:getDefense()", "contents": "itemType:getDefense()" },
            { "trigger":"itemType:getDescription()", "contents": "itemType:getDescription()" },
            { "trigger":"itemType:getElementDamage()", "contents": "itemType:getElementDamage()" },
            { "trigger":"itemType:getElementType()", "contents": "itemType:getElementType()" },
            { "trigger":"itemType:getExtraDefense()", "contents": "itemType:getExtraDefense()" },
            { "trigger":"itemType:getFluidSource()", "contents": "itemType:getFluidSource()" },
            { "trigger":"itemType:getId()", "contents": "itemType:getId()" },
            { "trigger":"itemType:getName()", "contents": "itemType:getName()" },
            { "trigger":"itemType:getPluralName()", "contents": "itemType:getPluralName()" },
            { "trigger":"itemType:getTransformDeEquipId()", "contents": "itemType:getTransformDeEquipId()" },
            { "trigger":"itemType:getTransformEquipId()", "contents": "itemType:getTransformEquipId()" },
            { "trigger":"itemType:getType()", "contents": "itemType:getType()" },
            { "trigger":"itemType:getWeaponType()", "contents": "itemType:getWeaponType()" },
            { "trigger":"itemType:getWeight([count = 1[, precise = true]])", "contents": "itemType:getWeight([count = 1[, precise = true]])" },
            { "trigger":"itemType:hasSubType()", "contents": "itemType:hasSubType()" },
            { "trigger":"itemType:isContainer()", "contents": "itemType:isContainer()" },
            { "trigger":"itemType:isCorpse()", "contents": "itemType:isCorpse()" },
            { "trigger":"itemType:isDoor()", "contents": "itemType:isDoor()" },
            { "trigger":"itemType:isFluidContainer()", "contents": "itemType:isFluidContainer()" },
            { "trigger":"itemType:isMovable()", "contents": "itemType:isMovable()" },
            { "trigger":"itemType:isReadable()", "contents": "itemType:isReadable()" },
            { "trigger":"itemType:isRune()", "contents": "itemType:isRune()" },
            { "trigger":"itemType:isStackable()", "contents": "itemType:isStackable()" },
            { "trigger":"itemType:isWritable()", "contents": "itemType:isWritable()" },
            { "trigger":"ModalWindow(id, title, message)", "contents": "ModalWindow(id, title, message)" },
            { "trigger":"ModalWindow.new(id, title, message)", "contents": "ModalWindow.new(id, title, message)" },
            { "trigger":"modalWindow:addButton(id, text)", "contents": "modalWindow:addButton(id, text)" },
            { "trigger":"modalWindow:addChoice(id, text)", "contents": "modalWindow:addChoice(id, text)" },
            { "trigger":"modalWindow:getButtonCount()", "contents": "modalWindow:getButtonCount()" },
            { "trigger":"modalWindow:getChoiceCount()", "contents": "modalWindow:getChoiceCount()" },
            { "trigger":"modalWindow:getDefaultEnterButton()", "contents": "modalWindow:getDefaultEnterButton()" },
            { "trigger":"modalWindow:getDefaultEscapeButton()", "contents": "modalWindow:getDefaultEscapeButton()" },
            { "trigger":"modalWindow:getId()", "contents": "modalWindow:getId()" },
            { "trigger":"modalWindow:getMessage()", "contents": "modalWindow:getMessage()" },
            { "trigger":"modalWindow:getTitle()", "contents": "modalWindow:getTitle()" },
            { "trigger":"modalWindow:hasPriority()", "contents": "modalWindow:hasPriority()" },
            { "trigger":"modalWindow:sendToPlayer(player)", "contents": "modalWindow:sendToPlayer(player)" },
            { "trigger":"modalWindow:setDefaultEnterButton(buttonId)", "contents": "modalWindow:setDefaultEnterButton(buttonId)" },
            { "trigger":"modalWindow:setDefaultEscapeButton(buttonId)", "contents": "modalWindow:setDefaultEscapeButton(buttonId)" },
            { "trigger":"modalWindow:setPriority(priority)", "contents": "modalWindow:setPriority(priority)" },
            { "trigger":"Monster(id)", "contents": "Monster(id)" },
            { "trigger":"Monster.new(id)", "contents": "Monster.new(id)" },
            { "trigger":"monster:addFriend(creature)", "contents": "monster:addFriend(creature)" },
            { "trigger":"monster:addTarget(creature[, pushFront = false])", "contents": "monster:addTarget(creature[, pushFront = false])" },
            { "trigger":"monster:despawn()", "contents": "monster:despawn()" },
            { "trigger":"monster:getFriendCount()", "contents": "monster:getFriendCount()" },
            { "trigger":"monster:getFriendList()", "contents": "monster:getFriendList()" },
            { "trigger":"monster:getSpawnPosition()", "contents": "monster:getSpawnPosition()" },
            { "trigger":"monster:getTargetCount()", "contents": "monster:getTargetCount()" },
            { "trigger":"monster:getTargetList()", "contents": "monster:getTargetList()" },
            { "trigger":"monster:getType()", "contents": "monster:getType()" },
            { "trigger":"monster:isFriend(creature)", "contents": "monster:isFriend(creature)" },
            { "trigger":"monster:isIdle()", "contents": "monster:isIdle()" },
            { "trigger":"monster:isMonster()", "contents": "monster:isMonster()" },
            { "trigger":"monster:isOpponent(creature)", "contents": "monster:isOpponent(creature)" },
            { "trigger":"monster:isTarget(creature)", "contents": "monster:isTarget(creature)" },
            { "trigger":"monster:removeFriend(creature)", "contents": "monster:removeFriend(creature)" },
            { "trigger":"monster:removeTarget(creature)", "contents": "monster:removeTarget(creature)" },
            { "trigger":"monster:searchTarget([searchType = TARGETSEARCH_DEFAULT])", "contents": "monster:searchTarget([searchType = TARGETSEARCH_DEFAULT])" },
            { "trigger":"monster:selectTarget(creature)", "contents": "monster:selectTarget(creature)" },
            { "trigger":"monster:setIdle(idle)", "contents": "monster:setIdle(idle)" },
            { "trigger":"MonsterType(id or name)", "contents": "MonsterType(id or name)" },
            { "trigger":"MonsterType.new(id or name)", "contents": "MonsterType.new(id or name)" },
            { "trigger":"monsterType:canPushCreatures()", "contents": "monsterType:canPushCreatures()" },
            { "trigger":"monsterType:canPushItems()", "contents": "monsterType:canPushItems()" },
            { "trigger":"monsterType:getArmor()", "contents": "monsterType:getArmor()" },
            { "trigger":"monsterType:getAttackList()", "contents": "monsterType:getAttackList()" },
            { "trigger":"monsterType:getBaseSpeed()", "contents": "monsterType:getBaseSpeed()" },
            { "trigger":"monsterType:getChangeTargetChance()", "contents": "monsterType:getChangeTargetChance()" },
            { "trigger":"monsterType:getChangeTargetSpeed()", "contents": "monsterType:getChangeTargetSpeed()" },
            { "trigger":"monsterType:getCombatImmunities()", "contents": "monsterType:getCombatImmunities()" },
            { "trigger":"monsterType:getConditionImmunities()", "contents": "monsterType:getConditionImmunities()" },
            { "trigger":"monsterType:getCorpseId()", "contents": "monsterType:getCorpseId()" },
            { "trigger":"monsterType:getCreatureEvents()", "contents": "monsterType:getCreatureEvents()" },
            { "trigger":"monsterType:getDefense()", "contents": "monsterType:getDefense()" },
            { "trigger":"monsterType:getDefenseList()", "contents": "monsterType:getDefenseList()" },
            { "trigger":"monsterType:getElementList()", "contents": "monsterType:getElementList()" },
            { "trigger":"monsterType:getExperience()", "contents": "monsterType:getExperience()" },
            { "trigger":"monsterType:getHealth()", "contents": "monsterType:getHealth()" },
            { "trigger":"monsterType:getLight()", "contents": "monsterType:getLight()" },
            { "trigger":"monsterType:getLoot()", "contents": "monsterType:getLoot()" },
            { "trigger":"monsterType:getManaCost()", "contents": "monsterType:getManaCost()" },
            { "trigger":"monsterType:getMaxHealth()", "contents": "monsterType:getMaxHealth()" },
            { "trigger":"monsterType:getMaxSummons()", "contents": "monsterType:getMaxSummons()" },
            { "trigger":"monsterType:getName()", "contents": "monsterType:getName()" },
            { "trigger":"monsterType:getNameDescription()", "contents": "monsterType:getNameDescription()" },
            { "trigger":"monsterType:getOutfit()", "contents": "monsterType:getOutfit()" },
            { "trigger":"monsterType:getRace()", "contents": "monsterType:getRace()" },
            { "trigger":"monsterType:getRunHealth()", "contents": "monsterType:getRunHealth()" },
            { "trigger":"monsterType:getStaticAttackChance()", "contents": "monsterType:getStaticAttackChance()" },
            { "trigger":"monsterType:getSummonList()", "contents": "monsterType:getSummonList()" },
            { "trigger":"monsterType:getTargetDistance()", "contents": "monsterType:getTargetDistance()" },
            { "trigger":"monsterType:getVoices()", "contents": "monsterType:getVoices()" },
            { "trigger":"monsterType:getYellChance()", "contents": "monsterType:getYellChance()" },
            { "trigger":"monsterType:getYellSpeedTicks()", "contents": "monsterType:getYellSpeedTicks()" },
            { "trigger":"monsterType:isAttackable()", "contents": "monsterType:isAttackable()" },
            { "trigger":"monsterType:isConvinceable()", "contents": "monsterType:isConvinceable()" },
            { "trigger":"monsterType:isHealthShown()", "contents": "monsterType:isHealthShown()" },
            { "trigger":"monsterType:isHostile()", "contents": "monsterType:isHostile()" },
            { "trigger":"monsterType:isIllusionable()", "contents": "monsterType:isIllusionable()" },
            { "trigger":"monsterType:isPushable()", "contents": "monsterType:isPushable()" },
            { "trigger":"monsterType:isSummonable()", "contents": "monsterType:isSummonable()" },
            { "trigger":"NetworkMessage.new()", "contents": "NetworkMessage.new()" },
            { "trigger":"networkMessage:addByte(number)", "contents": "networkMessage:addByte(number)" },
            { "trigger":"networkMessage:addDouble(number)", "contents": "networkMessage:addDouble(number)" },
            { "trigger":"networkMessage:addItem(item[, protocolVersion = CLIENT_VERSION_MIN])", "contents": "networkMessage:addItem(item[, protocolVersion = CLIENT_VERSION_MIN])" },
            { "trigger":"networkMessage:addItemId(itemId[, protocolVersion = CLIENT_VERSION_MIN])", "contents": "networkMessage:addItemId(itemId[, protocolVersion = CLIENT_VERSION_MIN])" },
            { "trigger":"networkMessage:addPosition(position)", "contents": "networkMessage:addPosition(position)" },
            { "trigger":"networkMessage:addString(string)", "contents": "networkMessage:addString(string)" },
            { "trigger":"networkMessage:addU16(number)", "contents": "networkMessage:addU16(number)" },
            { "trigger":"networkMessage:addU32(number)", "contents": "networkMessage:addU32(number)" },
            { "trigger":"networkMessage:addU64(number)", "contents": "networkMessage:addU64(number)" },
            { "trigger":"networkMessage:getByte()", "contents": "networkMessage:getByte()" },
            { "trigger":"networkMessage:getPosition()", "contents": "networkMessage:getPosition()" },
            { "trigger":"networkMessage:getString()", "contents": "networkMessage:getString()" },
            { "trigger":"networkMessage:getU16()", "contents": "networkMessage:getU16()" },
            { "trigger":"networkMessage:getU32()", "contents": "networkMessage:getU32()" },
            { "trigger":"networkMessage:getU64()", "contents": "networkMessage:getU64()" },
            { "trigger":"networkMessage:reset()", "contents": "networkMessage:reset()" },
            { "trigger":"networkMessage:sendToPlayer(player)", "contents": "networkMessage:sendToPlayer(player)" },
            { "trigger":"networkMessage:skipBytes(number)", "contents": "networkMessage:skipBytes(number)" },
            { "trigger":"Npc([id])", "contents": "Npc([id])" },
            { "trigger":"Npc.new([id])", "contents": "Npc.new([id])" },
            { "trigger":"npc:isNpc()", "contents": "npc:isNpc()" },
            { "trigger":"party:addInvite(player)", "contents": "party:addInvite(player)" },
            { "trigger":"party:addMember(player)", "contents": "party:addMember(player)" },
            { "trigger":"party:disband()", "contents": "party:disband()" },
            { "trigger":"party:getInviteeCount()", "contents": "party:getInviteeCount()" },
            { "trigger":"party:getInvitees()", "contents": "party:getInvitees()" },
            { "trigger":"party:getLeader()", "contents": "party:getLeader()" },
            { "trigger":"party:getMemberCount()", "contents": "party:getMemberCount()" },
            { "trigger":"party:getMembers()", "contents": "party:getMembers()" },
            { "trigger":"party:isSharedExperienceActive()", "contents": "party:isSharedExperienceActive()" },
            { "trigger":"party:isSharedExperienceEnabled()", "contents": "party:isSharedExperienceEnabled()" },
            { "trigger":"party:removeInvite(player)", "contents": "party:removeInvite(player)" },
            { "trigger":"party:removeMember(player)", "contents": "party:removeMember(player)" },
            { "trigger":"party:setLeader(player)", "contents": "party:setLeader(player)" },
            { "trigger":"party:setSharedExperience(active)", "contents": "party:setSharedExperience(active)" },
            { "trigger":"party:shareExperience(experience)", "contents": "party:shareExperience(experience)" },
            { "trigger":"Player(id or name or userdata)", "contents": "Player(id or name or userdata)" },
            { "trigger":"Player.new(id or name or userdata)", "contents": "Player.new(id or name or userdata)" },
            { "trigger":"player:addBlessing(blessing)", "contents": "player:addBlessing(blessing)" },
            { "trigger":"player:addExperience(experience[, sendText = false])", "contents": "player:addExperience(experience[, sendText = false])" },
            { "trigger":"player:addItem(itemId[, count = 1[, canDropOnMap = true[, subType = 1[, slot = SLOT_WHEREEVER]]]])", "contents": "player:addItem(itemId[, count = 1[, canDropOnMap = true[, subType = 1[, slot = SLOT_WHEREEVER]]]])" },
            { "trigger":"player:addItem(itemId[, count/subType = 1[, canDropOnMap = true[, slot = SLOT_WHEREEVER]]])", "contents": "player:addItem(itemId[, count/subType = 1[, canDropOnMap = true[, slot = SLOT_WHEREEVER]]])" },
            { "trigger":"player:addItemEx(item[, canDropOnMap = false[, slot = SLOT_WHEREEVER]])", "contents": "player:addItemEx(item[, canDropOnMap = false[, slot = SLOT_WHEREEVER]])" },
            { "trigger":"player:addManaSpent(amount)", "contents": "player:addManaSpent(amount)" },
            { "trigger":"player:addMapMark(position, type, description)", "contents": "player:addMapMark(position, type, description)" },
            { "trigger":"player:addMoney(money)", "contents": "player:addMoney(money)" },
            { "trigger":"player:addMount(mountId)", "contents": "player:addMount(mountId)" },
            { "trigger":"player:addOutfit(lookType)", "contents": "player:addOutfit(lookType)" },
            { "trigger":"player:addOutfitAddon(lookType, addon)", "contents": "player:addOutfitAddon(lookType, addon)" },
            { "trigger":"player:addPremiumDays(days)", "contents": "player:addPremiumDays(days)" },
            { "trigger":"player:addSkillTries(skillType, tries)", "contents": "player:addSkillTries(skillType, tries)" },
            { "trigger":"player:addSoul(soulChange)", "contents": "player:addSoul(soulChange)" },
            { "trigger":"player:canLearnSpell(spellName)", "contents": "player:canLearnSpell(spellName)" },
            { "trigger":"player:channelSay(speaker, type, text, channelId)", "contents": "player:channelSay(speaker, type, text, channelId)" },
            { "trigger":"player:forgetSpell(spellName)", "contents": "player:forgetSpell(spellName)" },
            { "trigger":"player:getAccountId()", "contents": "player:getAccountId()" },
            { "trigger":"player:getAccountType()", "contents": "player:getAccountType()" },
            { "trigger":"player:getBankBalance()", "contents": "player:getBankBalance()" },
            { "trigger":"player:getBaseMagicLevel()", "contents": "player:getBaseMagicLevel()" },
            { "trigger":"player:getCapacity()", "contents": "player:getCapacity()" },
            { "trigger":"player:getClient()", "contents": "player:getClient()" },
            { "trigger":"player:getDeathPenalty()", "contents": "player:getDeathPenalty()" },
            { "trigger":"player:getDepotItems(depotId)", "contents": "player:getDepotItems(depotId)" },
            { "trigger":"player:getEffectiveSkillLevel(skillType)", "contents": "player:getEffectiveSkillLevel(skillType)" },
            { "trigger":"player:getExperience()", "contents": "player:getExperience()" },
            { "trigger":"player:getFreeCapacity()", "contents": "player:getFreeCapacity()" },
            { "trigger":"player:getGroup()", "contents": "player:getGroup()" },
            { "trigger":"player:getGuid()", "contents": "player:getGuid()" },
            { "trigger":"player:getGuild()", "contents": "player:getGuild()" },
            { "trigger":"player:getGuildLevel()", "contents": "player:getGuildLevel()" },
            { "trigger":"player:getGuildNick()", "contents": "player:getGuildNick()" },
            { "trigger":"player:getHouse()", "contents": "player:getHouse()" },
            { "trigger":"player:getIp()", "contents": "player:getIp()" },
            { "trigger":"player:getItemById(itemId, deepSearch[, subType = -1])", "contents": "player:getItemById(itemId, deepSearch[, subType = -1])" },
            { "trigger":"player:getItemCount(itemId[, subType = -1])", "contents": "player:getItemCount(itemId[, subType = -1])" },
            { "trigger":"player:getLastLoginSaved()", "contents": "player:getLastLoginSaved()" },
            { "trigger":"player:getLevel()", "contents": "player:getLevel()" },
            { "trigger":"player:getMagicLevel()", "contents": "player:getMagicLevel()" },
            { "trigger":"player:getManaSpent()", "contents": "player:getManaSpent()" },
            { "trigger":"player:getMaxSoul()", "contents": "player:getMaxSoul()" },
            { "trigger":"player:getMoney()", "contents": "player:getMoney()" },
            { "trigger":"player:getParty()", "contents": "player:getParty()" },
            { "trigger":"player:getPremiumDays()", "contents": "player:getPremiumDays()" },
            { "trigger":"player:getSex()", "contents": "player:getSex()" },
            { "trigger":"player:getSkillLevel(skillType)", "contents": "player:getSkillLevel(skillType)" },
            { "trigger":"player:getSkillPercent(skillType)", "contents": "player:getSkillPercent(skillType)" },
            { "trigger":"player:getSkillTries(skillType)", "contents": "player:getSkillTries(skillType)" },
            { "trigger":"player:getSkull()", "contents": "player:getSkull()" },
            { "trigger":"player:getSkullTime()", "contents": "player:getSkullTime()" },
            { "trigger":"player:getSlotItem(slot)", "contents": "player:getSlotItem(slot)" },
            { "trigger":"player:getSoul()", "contents": "player:getSoul()" },
            { "trigger":"player:getStamina()", "contents": "player:getStamina()" },
            { "trigger":"player:getStorageValue(key)", "contents": "player:getStorageValue(key)" },
            { "trigger":"player:getTown()", "contents": "player:getTown()" },
            { "trigger":"player:getVocation()", "contents": "player:getVocation()" },
            { "trigger":"player:hasBlessing(blessing)", "contents": "player:hasBlessing(blessing)" },
            { "trigger":"player:hasLearnedSpell(spellName)", "contents": "player:hasLearnedSpell(spellName)" },
            { "trigger":"player:hasMount(mountId)", "contents": "player:hasMount(mountId)" },
            { "trigger":"player:hasOutfit(lookType[, addon = 0])", "contents": "player:hasOutfit(lookType[, addon = 0])" },
            { "trigger":"player:isPlayer()", "contents": "player:isPlayer()" },
            { "trigger":"player:isPzLocked()", "contents": "player:isPzLocked()" },
            { "trigger":"player:learnSpell(spellName)", "contents": "player:learnSpell(spellName)" },
            { "trigger":"player:openChannel(channelId)", "contents": "player:openChannel(channelId)" },
            { "trigger":"player:popupFYI(message)", "contents": "player:popupFYI(message)" },
            { "trigger":"player:removeBlessing(blessing)", "contents": "player:removeBlessing(blessing)" },
            { "trigger":"player:removeItem(itemId, count[, subType = -1[, ignoreEquipped = false]])", "contents": "player:removeItem(itemId, count[, subType = -1[, ignoreEquipped = false]])" },
            { "trigger":"player:removeMoney(money)", "contents": "player:removeMoney(money)" },
            { "trigger":"player:removeMount(mountId)", "contents": "player:removeMount(mountId)" },
            { "trigger":"player:removeOutfit(lookType)", "contents": "player:removeOutfit(lookType)" },
            { "trigger":"player:removeOutfitAddon(lookType, addon)", "contents": "player:removeOutfitAddon(lookType, addon)" },
            { "trigger":"player:removePremiumDays(days)", "contents": "player:removePremiumDays(days)" },
            { "trigger":"player:save()", "contents": "player:save()" },
            { "trigger":"player:sendChannelMessage(author, text, type, channelId)", "contents": "player:sendChannelMessage(author, text, type, channelId)" },
            { "trigger":"player:sendOutfitWindow()", "contents": "player:sendOutfitWindow()" },
            { "trigger":"player:sendTextMessage(type, text[, position, primaryValue = 0, primaryColor = TEXTCOLOR_NONE[, secondaryValue = 0, secondaryColor = TEXTCOLOR_NONE]])", "contents": "player:sendTextMessage(type, text[, position, primaryValue = 0, primaryColor = TEXTCOLOR_NONE[, secondaryValue = 0, secondaryColor = TEXTCOLOR_NONE]])" },
            { "trigger":"player:sendTutorial(tutorialId)", "contents": "player:sendTutorial(tutorialId)" },
            { "trigger":"player:setAccountType(accountType)", "contents": "player:setAccountType(accountType)" },
            { "trigger":"player:setBankBalance(bankBalance)", "contents": "player:setBankBalance(bankBalance)" },
            { "trigger":"player:setCapacity(capacity)", "contents": "player:setCapacity(capacity)" },
            { "trigger":"player:setGhostMode(enabled)", "contents": "player:setGhostMode(enabled)" },
            { "trigger":"player:setGroup(group)", "contents": "player:setGroup(group)" },
            { "trigger":"player:setGuild(guild)", "contents": "player:setGuild(guild)" },
            { "trigger":"player:setGuildLevel(level)", "contents": "player:setGuildLevel(level)" },
            { "trigger":"player:setGuildNick(nick)", "contents": "player:setGuildNick(nick)" },
            { "trigger":"player:setMaxMana(maxMana)", "contents": "player:setMaxMana(maxMana)" },
            { "trigger":"player:setSex(newSex)", "contents": "player:setSex(newSex)" },
            { "trigger":"player:setSkull(skull)", "contents": "player:setSkull(skull)" },
            { "trigger":"player:setSkullTime(skullTime)", "contents": "player:setSkullTime(skullTime)" },
            { "trigger":"player:setStamina(stamina)", "contents": "player:setStamina(stamina)" },
            { "trigger":"player:setStorageValue(key, value)", "contents": "player:setStorageValue(key, value)" },
            { "trigger":"player:setTown(town)", "contents": "player:setTown(town)" },
            { "trigger":"player:setVocation(vocation)", "contents": "player:setVocation(vocation)" },
            { "trigger":"player:showTextDialog(itemId[, canWrite[, length]])", "contents": "player:showTextDialog(itemId[, canWrite[, length]])" },
            { "trigger":"player:showTextDialog(itemId[, text[, canWrite[, length]]])", "contents": "player:showTextDialog(itemId[, text[, canWrite[, length]]])" },
            { "trigger":"position:getDistance(positionEx)", "contents": "position:getDistance(positionEx)" },
            { "trigger":"position:getTile()", "contents": "position:getTile()" },
            { "trigger":"position:isSightClear(positionEx[, sameFloor = true])", "contents": "position:isSightClear(positionEx[, sameFloor = true])" },
            { "trigger":"position:sendDistanceEffect(positionEx, distanceEffect[, player = nullptr])", "contents": "position:sendDistanceEffect(positionEx, distanceEffect[, player = nullptr])" },
            { "trigger":"position:sendMagicEffect(magicEffect[, player = nullptr])", "contents": "position:sendMagicEffect(magicEffect[, player = nullptr])" },
            { "trigger":"Tile.new(position)", "contents": "Tile.new(position)" },
            { "trigger":"Tile.new(x, y, z)", "contents": "Tile.new(x, y, z)" },
            { "trigger":"tile:getBottomCreature()", "contents": "tile:getBottomCreature()" },
            { "trigger":"tile:getBottomVisibleCreature(creature)", "contents": "tile:getBottomVisibleCreature(creature)" },
            { "trigger":"tile:getCreatureCount()", "contents": "tile:getCreatureCount()" },
            { "trigger":"tile:getCreatures()", "contents": "tile:getCreatures()" },
            { "trigger":"tile:getDownItemCount()", "contents": "tile:getDownItemCount()" },
            { "trigger":"tile:getFieldItem()", "contents": "tile:getFieldItem()" },
            { "trigger":"tile:getGround()", "contents": "tile:getGround()" },
            { "trigger":"tile:getHouse()", "contents": "tile:getHouse()" },
            { "trigger":"tile:getItemById(itemId[, subType = -1])", "contents": "tile:getItemById(itemId[, subType = -1])" },
            { "trigger":"tile:getItemByTopOrder(topOrder)", "contents": "tile:getItemByTopOrder(topOrder)" },
            { "trigger":"tile:getItemByType(itemType)", "contents": "tile:getItemByType(itemType)" },
            { "trigger":"tile:getItemCount()", "contents": "tile:getItemCount()" },
            { "trigger":"tile:getItems()", "contents": "tile:getItems()" },
            { "trigger":"tile:getPosition()", "contents": "tile:getPosition()" },
            { "trigger":"tile:getThing(index)", "contents": "tile:getThing(index)" },
            { "trigger":"tile:getThingCount()", "contents": "tile:getThingCount()" },
            { "trigger":"tile:getTopCreature()", "contents": "tile:getTopCreature()" },
            { "trigger":"tile:getTopDownItem()", "contents": "tile:getTopDownItem()" },
            { "trigger":"tile:getTopItemCount()", "contents": "tile:getTopItemCount()" },
            { "trigger":"tile:getTopTopItem()", "contents": "tile:getTopTopItem()" },
            { "trigger":"tile:getTopVisibleCreature(creature)", "contents": "tile:getTopVisibleCreature(creature)" },
            { "trigger":"tile:getTopVisibleThing(creature)", "contents": "tile:getTopVisibleThing(creature)" },
            { "trigger":"tile:hasFlag(flag)", "contents": "tile:hasFlag(flag)" },
            { "trigger":"tile:hasProperty(property[, item])", "contents": "tile:hasProperty(property[, item])" },
            { "trigger":"tile:queryAdd(thing[, flags])", "contents": "tile:queryAdd(thing[, flags])" },
            { "trigger":"Town(id or name)", "contents": "Town(id or name)" },
            { "trigger":"Town.new(id or name)", "contents": "Town.new(id or name)" },
            { "trigger":"town:getId()", "contents": "town:getId()" },
            { "trigger":"town:getName()", "contents": "town:getName()" },
            { "trigger":"town:getTemplePosition()", "contents": "town:getTemplePosition()" },
            { "trigger":"Vocation(id)", "contents": "Vocation(id)" },
            { "trigger":"Vocation.new(id)", "contents": "Vocation.new(id)" },
            { "trigger":"vocation:getAttackSpeed()", "contents": "vocation:getAttackSpeed()" },
            { "trigger":"vocation:getBaseSpeed()", "contents": "vocation:getBaseSpeed()" },
            { "trigger":"vocation:getCapacityGain()", "contents": "vocation:getCapacityGain()" },
            { "trigger":"vocation:getClientId()", "contents": "vocation:getClientId()" },
            { "trigger":"vocation:getDemotion()", "contents": "vocation:getDemotion()" },
            { "trigger":"vocation:getDescription()", "contents": "vocation:getDescription()" },
            { "trigger":"vocation:getHealthGain()", "contents": "vocation:getHealthGain()" },
            { "trigger":"vocation:getHealthGainAmount()", "contents": "vocation:getHealthGainAmount()" },
            { "trigger":"vocation:getHealthGainTicks()", "contents": "vocation:getHealthGainTicks()" },
            { "trigger":"vocation:getId()", "contents": "vocation:getId()" },
            { "trigger":"vocation:getManaGain()", "contents": "vocation:getManaGain()" },
            { "trigger":"vocation:getManaGainAmount()", "contents": "vocation:getManaGainAmount()" },
            { "trigger":"vocation:getManaGainTicks()", "contents": "vocation:getManaGainTicks()" },
            { "trigger":"vocation:getMaxSoul()", "contents": "vocation:getMaxSoul()" },
            { "trigger":"vocation:getName()", "contents": "vocation:getName()" },
            { "trigger":"vocation:getPromotion()", "contents": "vocation:getPromotion()" },
            { "trigger":"vocation:getRequiredManaSpent(magicLevel)", "contents": "vocation:getRequiredManaSpent(magicLevel)" },
            { "trigger":"vocation:getRequiredSkillTries(skillType, skillLevel)", "contents": "vocation:getRequiredSkillTries(skillType, skillLevel)" },
            { "trigger":"vocation:getSoulGainTicks()", "contents": "vocation:getSoulGainTicks()" },
            { "trigger":"", "contents": "" },
            { "trigger":"addDamageCondition(condition, rounds, time, value)", "contents": "addDamageCondition(condition, rounds, time, value)" },
            { "trigger":"addEvent(callback, delay, ...)", "contents": "addEvent(callback, delay, ...)" },
            { "trigger":"addOutfitCondition(condition, lookTypeEx, lookType, lookHead, lookBody, lookLegs, lookFeet)", "contents": "addOutfitCondition(condition, lookTypeEx, lookType, lookHead, lookBody, lookLegs, lookFeet)" },
            { "trigger":"broadcastMessage(message, type)", "contents": "broadcastMessage(message, type)" },
            { "trigger":"canPlayerLearnInstantSpell(cid, name)", "contents": "canPlayerLearnInstantSpell(cid, name)" },
            { "trigger":"canPlayerWearOutfit(cid, lookType, addons)", "contents": "canPlayerWearOutfit(cid, lookType, addons)" },
            { "trigger":"cleanMap()", "contents": "cleanMap()" },
            { "trigger":"createCombatArea( {area}, <optional> {extArea} )", "contents": "createCombatArea( {area}, <optional> {extArea} )" },
            { "trigger":"createCombatObject()", "contents": "createCombatObject()" },
            { "trigger":"createConditionObject(type)", "contents": "createConditionObject(type)" },
            { "trigger":"Creature.getClosestFreePosition(self, position, extended)", "contents": "Creature.getClosestFreePosition(self, position, extended)" },
            { "trigger":"debugPrint(text)", "contents": "debugPrint(text)" },
            { "trigger":"doAddCondition(cid, condition)", "contents": "doAddCondition(cid, condition)" },
            { "trigger":"doAddContainerItem(uid, itemid, <optional> count/subtype)", "contents": "doAddContainerItem(uid, itemid, <optional> count/subtype)" },
            { "trigger":"doAddContainerItemEx(uid, virtualId)", "contents": "doAddContainerItemEx(uid, virtualId)" },
            { "trigger":"doAddMapMark(cid, pos, type, description)", "contents": "doAddMapMark(cid, pos, type, description)" },
            { "trigger":"doAreaCombatCondition(cid, pos, area, condition, effect)", "contents": "doAreaCombatCondition(cid, pos, area, condition, effect)" },
            { "trigger":"doAreaCombatDispel(cid, pos, area, type, effect)", "contents": "doAreaCombatDispel(cid, pos, area, type, effect)" },
            { "trigger":"doAreaCombatHealth(cid, type, pos, area, min, max, effect)", "contents": "doAreaCombatHealth(cid, type, pos, area, min, max, effect)" },
            { "trigger":"doAreaCombatMana(cid, pos, area, min, max, effect)", "contents": "doAreaCombatMana(cid, pos, area, min, max, effect)" },
            { "trigger":"doChallengeCreature(cid, target)", "contents": "doChallengeCreature(cid, target)" },
            { "trigger":"doChangeSpeed(cid, delta)", "contents": "doChangeSpeed(cid, delta)" },
            { "trigger":"doChangeTypeItem(uid, newtype)", "contents": "doChangeTypeItem(uid, newtype)" },
            { "trigger":"doCombat(cid, combat, param)", "contents": "doCombat(cid, combat, param)" },
            { "trigger":"doConvinceCreature(cid, target)", "contents": "doConvinceCreature(cid, target)" },
            { "trigger":"doCreateItem(itemid, type/count, pos)", "contents": "doCreateItem(itemid, type/count, pos)" },
            { "trigger":"doCreateItemEx(itemid, <optional> count/subtype)", "contents": "doCreateItemEx(itemid, <optional> count/subtype)" },
            { "trigger":"doCreateNpc(name, pos)", "contents": "doCreateNpc(name, pos)" },
            { "trigger":"doCreateTeleport(itemid, topos, createpos)", "contents": "doCreateTeleport(itemid, topos, createpos)" },
            { "trigger":"doCreatureAddHealth(cid, health)", "contents": "doCreatureAddHealth(cid, health)" },
            { "trigger":"doCreatureChangeOutfit(cid, outfit)", "contents": "doCreatureChangeOutfit(cid, outfit)" },
            { "trigger":"doCreatureSay(cid, text, type, ...)", "contents": "doCreatureSay(cid, text, type, ...)" },
            { "trigger":"doCreatureSayWithRadius(cid, text, type, radiusx, radiusy, position)", "contents": "doCreatureSayWithRadius(cid, text, type, radiusx, radiusy, position)" },
            { "trigger":"doCreatureSetLookDir(cid, direction)", "contents": "doCreatureSetLookDir(cid, direction)" },
            { "trigger":"doDecayItem(uid)", "contents": "doDecayItem(uid)" },
            { "trigger":"doForceSummonCreature(name, pos)", "contents": "doForceSummonCreature(name, pos)" },
            { "trigger":"doMonsterChangeTarget(cid)", "contents": "doMonsterChangeTarget(cid)" },
            { "trigger":"doMoveCreature(cid, direction)", "contents": "doMoveCreature(cid, direction)" },
            { "trigger":"doPlayerAddBlessing(cid, blessing)", "contents": "doPlayerAddBlessing(cid, blessing)" },
            { "trigger":"doPlayerAddExp(cid, exp, useMult, ...)", "contents": "doPlayerAddExp(cid, exp, useMult, ...)" },
            { "trigger":"doPlayerAddItem(cid, itemid, <optional: default: 1> count, <optional: default: 1> canDropOnMap, <optional: default: 1>subtype)", "contents": "doPlayerAddItem(cid, itemid, <optional: default: 1> count, <optional: default: 1> canDropOnMap, <optional: default: 1>subtype)" },
            { "trigger":"doPlayerAddItem(uid, itemid, <optional: default: 1> count/subtype)", "contents": "doPlayerAddItem(uid, itemid, <optional: default: 1> count/subtype)" },
            { "trigger":"doPlayerAddItemEx(cid, uid, ...)", "contents": "doPlayerAddItemEx(cid, uid, ...)" },
            { "trigger":"doPlayerAddMana(cid, mana, ...)", "contents": "doPlayerAddMana(cid, mana, ...)" },
            { "trigger":"doPlayerAddManaSpent(cid, mana)", "contents": "doPlayerAddManaSpent(cid, mana)" },
            { "trigger":"doPlayerAddMoney(cid, money)", "contents": "doPlayerAddMoney(cid, money)" },
            { "trigger":"doPlayerAddMount(cid, mountId)", "contents": "doPlayerAddMount(cid, mountId)" },
            { "trigger":"doPlayerAddOutfit(cid, lookType, addons)", "contents": "doPlayerAddOutfit(cid, lookType, addons)" },
            { "trigger":"doPlayerAddPremiumDays(cid, days)", "contents": "doPlayerAddPremiumDays(cid, days)" },
            { "trigger":"doPlayerAddSkillTry(cid, skillid, n)", "contents": "doPlayerAddSkillTry(cid, skillid, n)" },
            { "trigger":"doPlayerAddSoul(cid, soul)", "contents": "doPlayerAddSoul(cid, soul)" },
            { "trigger":"doPlayerFeed(cid, food)", "contents": "doPlayerFeed(cid, food)" },
            { "trigger":"doPlayerJoinParty(cid, leaderId)", "contents": "doPlayerJoinParty(cid, leaderId)" },
            { "trigger":"doPlayerPopupFYI(cid, message)", "contents": "doPlayerPopupFYI(cid, message)" },
            { "trigger":"doPlayerRemOutfit(cid, lookType, addons)", "contents": "doPlayerRemOutfit(cid, lookType, addons)" },
            { "trigger":"doPlayerRemoveItem(cid, itemid, count, <optional> subtype, <optional> ignoreEquipped)", "contents": "doPlayerRemoveItem(cid, itemid, count, <optional> subtype, <optional> ignoreEquipped)" },
            { "trigger":"doPlayerRemoveMoney(cid, money)", "contents": "doPlayerRemoveMoney(cid, money)" },
            { "trigger":"doPlayerRemoveMount(cid, mountId)", "contents": "doPlayerRemoveMount(cid, mountId)" },
            { "trigger":"doPlayerRemovePremiumDays(cid, days)", "contents": "doPlayerRemovePremiumDays(cid, days)" },
            { "trigger":"doPlayerSendCancel(cid, text)", "contents": "doPlayerSendCancel(cid, text)" },
            { "trigger":"doPlayerSendTextMessage(cid, type, text, ...)", "contents": "doPlayerSendTextMessage(cid, type, text, ...)" },
            { "trigger":"doPlayerSetBalance(cid, balance)", "contents": "doPlayerSetBalance(cid, balance)" },
            { "trigger":"doPlayerSetGuildLevel(cid, level)", "contents": "doPlayerSetGuildLevel(cid, level)" },
            { "trigger":"doPlayerSetGuildNick(cid, nick)", "contents": "doPlayerSetGuildNick(cid, nick)" },
            { "trigger":"doPlayerSetOfflineTrainingSkill(cid, skill)", "contents": "doPlayerSetOfflineTrainingSkill(cid, skill)" },
            { "trigger":"doPlayerSetSex(cid, sex)", "contents": "doPlayerSetSex(cid, sex)" },
            { "trigger":"doPlayerSetTown(cid, town)", "contents": "doPlayerSetTown(cid, town)" },
            { "trigger":"doPlayerSetVocation(cid, vocation)", "contents": "doPlayerSetVocation(cid, vocation)" },
            { "trigger":"doRelocate(pos, posTo)", "contents": "doRelocate(pos, posTo)" },
            { "trigger":"doRemoveCondition(cid, type[, subId])", "contents": "doRemoveCondition(cid, type[, subId])" },
            { "trigger":"doRemoveCreature(cid)", "contents": "doRemoveCreature(cid)" },
            { "trigger":"doRemoveItem(uid, ...)", "contents": "doRemoveItem(uid, ...)" },
            { "trigger":"doSendDistanceShoot(fromPos, toPos, distanceEffect, ...)", "contents": "doSendDistanceShoot(fromPos, toPos, distanceEffect, ...)" },
            { "trigger":"doSendMagicEffect(pos, magicEffect, ...)", "contents": "doSendMagicEffect(pos, magicEffect, ...)" },
            { "trigger":"doSendTutorial(cid, tutorialId)", "contents": "doSendTutorial(cid, tutorialId)" },
            { "trigger":"doSetCreatureDropLoot(cid, doDrop)", "contents": "doSetCreatureDropLoot(cid, doDrop)" },
            { "trigger":"doSetCreatureLight(cid, lightLevel, lightColor, time)", "contents": "doSetCreatureLight(cid, lightLevel, lightColor, time)" },
            { "trigger":"doSetCreatureOutfit(cid, outfit, time)", "contents": "doSetCreatureOutfit(cid, outfit, time)" },
            { "trigger":"doSetItemActionId(uid, actionId)", "contents": "doSetItemActionId(uid, actionId)" },
            { "trigger":"doSetItemOutfit(cid, item, time)", "contents": "doSetItemOutfit(cid, item, time)" },
            { "trigger":"doSetItemSpecialDescription(uid, desc)", "contents": "doSetItemSpecialDescription(uid, desc)" },
            { "trigger":"doSetItemText(uid, text)", "contents": "doSetItemText(uid, text)" },
            { "trigger":"doSetMonsterOutfit(cid, name, time)", "contents": "doSetMonsterOutfit(cid, name, time)" },
            { "trigger":"doSetMonsterTarget(cid, target)", "contents": "doSetMonsterTarget(cid, target)" },
            { "trigger":"doShowTextDialog(cid, itemId, text)", "contents": "doShowTextDialog(cid, itemId, text)" },
            { "trigger":"doSummonCreature(name, pos)", "contents": "doSummonCreature(name, pos)" },
            { "trigger":"doTargetCombatCondition(cid, target, condition, effect)", "contents": "doTargetCombatCondition(cid, target, condition, effect)" },
            { "trigger":"doTargetCombatDispel(cid, target, type, effect)", "contents": "doTargetCombatDispel(cid, target, type, effect)" },
            { "trigger":"doTargetCombatHealth(cid, target, type, min, max, effect)", "contents": "doTargetCombatHealth(cid, target, type, min, max, effect)" },
            { "trigger":"doTargetCombatMana(cid, target, min, max, effect)", "contents": "doTargetCombatMana(cid, target, min, max, effect)" },
            { "trigger":"doTeleportThing(uid, dest, pushMovement)", "contents": "doTeleportThing(uid, dest, pushMovement)" },
            { "trigger":"doTileAddItemEx(pos, uid)", "contents": "doTileAddItemEx(pos, uid)" },
            { "trigger":"doTransformItem(uid, newItemId, ...)", "contents": "doTransformItem(uid, newItemId, ...)" },
            { "trigger":"Game.convertIpToString(ip)", "contents": "Game.convertIpToString(ip)" },
            { "trigger":"Game.getStorageValue(key)", "contents": "Game.getStorageValue(key)" },
            { "trigger":"Game.setStorageValue(key, value)", "contents": "Game.setStorageValue(key, value)" },
            { "trigger":"getAccountNumberByPlayerName(name)", "contents": "getAccountNumberByPlayerName(name)" },
            { "trigger":"getBlessingsCost(level)", "contents": "getBlessingsCost(level)" },
            { "trigger":"getConfigInfo(info)", "contents": "getConfigInfo(info)" },
            { "trigger":"getContainerCap(uid)", "contents": "getContainerCap(uid)" },
            { "trigger":"getContainerCapById(itemId)", "contents": "getContainerCapById(itemId)" },
            { "trigger":"getContainerItem(uid, slot)", "contents": "getContainerItem(uid, slot)" },
            { "trigger":"getContainerSize(uid)", "contents": "getContainerSize(uid)" },
            { "trigger":"getCreatureBaseSpeed(cid)", "contents": "getCreatureBaseSpeed(cid)" },
            { "trigger":"getCreatureCondition(cid, condition[, subId])", "contents": "getCreatureCondition(cid, condition[, subId])" },
            { "trigger":"getCreatureHealth(cid)", "contents": "getCreatureHealth(cid)" },
            { "trigger":"getCreatureMaster(cid)", "contents": "getCreatureMaster(cid)" },
            { "trigger":"getCreatureMaxHealth(cid)", "contents": "getCreatureMaxHealth(cid)" },
            { "trigger":"getCreatureName(cid)", "contents": "getCreatureName(cid)" },
            { "trigger":"getCreatureOutfit(cid)", "contents": "getCreatureOutfit(cid)" },
            { "trigger":"getCreaturePosition(cid)", "contents": "getCreaturePosition(cid)" },
            { "trigger":"getCreatureSpeed(cid)", "contents": "getCreatureSpeed(cid)" },
            { "trigger":"getCreatureSummons(cid)", "contents": "getCreatureSummons(cid)" },
            { "trigger":"getCreatureTarget(cid)", "contents": "getCreatureTarget(cid)" },
            { "trigger":"getDepotId(uid)", "contents": "getDepotId(uid)" },
            { "trigger":"getDistanceBetween(firstPosition, secondPosition)", "contents": "getDistanceBetween(firstPosition, secondPosition)" },
            { "trigger":"getFluidSourceType(itemId)", "contents": "getFluidSourceType(itemId)" },
            { "trigger":"getGlobalStorageValue(key)", "contents": "getGlobalStorageValue(key)" },
            { "trigger":"getGuildId(guildName)", "contents": "getGuildId(guildName)" },
            { "trigger":"getHouseAccessList(id, listId)", "contents": "getHouseAccessList(id, listId)" },
            { "trigger":"getHouseByPlayerGUID(playerGUID)", "contents": "getHouseByPlayerGUID(playerGUID)" },
            { "trigger":"getHouseEntry(houseId)", "contents": "getHouseEntry(houseId)" },
            { "trigger":"getHouseName(houseId)", "contents": "getHouseName(houseId)" },
            { "trigger":"getHouseOwner(houseId)", "contents": "getHouseOwner(houseId)" },
            { "trigger":"getHouseRent(id)", "contents": "getHouseRent(id)" },
            { "trigger":"getHouseTilesSize(houseId)", "contents": "getHouseTilesSize(houseId)" },
            { "trigger":"getHouseTown(houseId)", "contents": "getHouseTown(houseId)" },
            { "trigger":"getInstantSpellInfoByName(cid, name)", "contents": "getInstantSpellInfoByName(cid, name)" },
            { "trigger":"getInstantSpellWords(name)", "contents": "getInstantSpellWords(name)" },
            { "trigger":"getIPByPlayerName(name)", "contents": "getIPByPlayerName(name)" },
            { "trigger":"getItemDescriptions(itemId)", "contents": "getItemDescriptions(itemId)" },
            { "trigger":"getItemIdByName(name)", "contents": "getItemIdByName(name)" },
            { "trigger":"getItemName(itemId)", "contents": "getItemName(itemId)" },
            { "trigger":"getItemRWInfo(uid)", "contents": "getItemRWInfo(uid)" },
            { "trigger":"getItemWeight(itemId, ...)", "contents": "getItemWeight(itemId, ...)" },
            { "trigger":"getItemWeightByUID(uid, ...)", "contents": "getItemWeightByUID(uid, ...)" },
            { "trigger":"getMonsterFriendList(cid)", "contents": "getMonsterFriendList(cid)" },
            { "trigger":"getMonsterTargetList(cid)", "contents": "getMonsterTargetList(cid)" },
            { "trigger":"getOnlinePlayers()", "contents": "getOnlinePlayers()" },
            { "trigger":"getPartyMembers(cid)", "contents": "getPartyMembers(cid)" },
            { "trigger":"getPlayerAccess(cid)", "contents": "getPlayerAccess(cid)" },
            { "trigger":"getPlayerAccountType(cid)", "contents": "getPlayerAccountType(cid)" },
            { "trigger":"getPlayerBalance(cid)", "contents": "getPlayerBalance(cid)" },
            { "trigger":"getPlayerBlessing(cid, blessing)", "contents": "getPlayerBlessing(cid, blessing)" },
            { "trigger":"getPlayerByName(name)", "contents": "getPlayerByName(name)" },
            { "trigger":"getPlayerDepotItems(cid, depotId)", "contents": "getPlayerDepotItems(cid, depotId)" },
            { "trigger":"getPlayerFlagValue(cid, flag)", "contents": "getPlayerFlagValue(cid, flag)" },
            { "trigger":"getPlayerFood(cid)", "contents": "getPlayerFood(cid)" },
            { "trigger":"getPlayerFreeCap(cid)", "contents": "getPlayerFreeCap(cid)" },
            { "trigger":"getPlayerGroupId(cid)", "contents": "getPlayerGroupId(cid)" },
            { "trigger":"getPlayerGUID(cid)", "contents": "getPlayerGUID(cid)" },
            { "trigger":"getPlayerGUIDByName(name)", "contents": "getPlayerGUIDByName(name)" },
            { "trigger":"getPlayerGuildId(cid)", "contents": "getPlayerGuildId(cid)" },
            { "trigger":"getPlayerGuildLevel(cid)", "contents": "getPlayerGuildLevel(cid)" },
            { "trigger":"getPlayerGuildName(cid)", "contents": "getPlayerGuildName(cid)" },
            { "trigger":"getPlayerGuildNick(cid)", "contents": "getPlayerGuildNick(cid)" },
            { "trigger":"getPlayerGuildRank(cid)", "contents": "getPlayerGuildRank(cid)" },
            { "trigger":"getPlayerInstantSpellCount(cid)", "contents": "getPlayerInstantSpellCount(cid)" },
            { "trigger":"getPlayerInstantSpellInfo(cid, index)", "contents": "getPlayerInstantSpellInfo(cid, index)" },
            { "trigger":"getPlayerIp(cid)", "contents": "getPlayerIp(cid)" },
            { "trigger":"getPlayerItemById(cid, deepSearch, itemId, ...)", "contents": "getPlayerItemById(cid, deepSearch, itemId, ...)" },
            { "trigger":"getPlayerItemCount(cid, itemId, ...)", "contents": "getPlayerItemCount(cid, itemId, ...)" },
            { "trigger":"getPlayerLastLoginSaved(cid)", "contents": "getPlayerLastLoginSaved(cid)" },
            { "trigger":"getPlayerLearnedInstantSpell(cid, name)", "contents": "getPlayerLearnedInstantSpell(cid, name)" },
            { "trigger":"getPlayerLevel(cid)", "contents": "getPlayerLevel(cid)" },
            { "trigger":"getPlayerLight(cid)", "contents": "getPlayerLight(cid)" },
            { "trigger":"getPlayerLookDir(cid)", "contents": "getPlayerLookDir(cid)" },
            { "trigger":"getPlayerLossPercent(cid)", "contents": "getPlayerLossPercent(cid)" },
            { "trigger":"getPlayerMagLevel(cid)", "contents": "getPlayerMagLevel(cid)" },
            { "trigger":"getPlayerMana(cid)", "contents": "getPlayerMana(cid)" },
            { "trigger":"getPlayerMasterPos(cid)", "contents": "getPlayerMasterPos(cid)" },
            { "trigger":"getPlayerMaxMana(cid)", "contents": "getPlayerMaxMana(cid)" },
            { "trigger":"getPlayerMoney(cid)", "contents": "getPlayerMoney(cid)" },
            { "trigger":"getPlayerMount(cid, mountId)", "contents": "getPlayerMount(cid, mountId)" },
            { "trigger":"getPlayerName(cid)", "contents": "getPlayerName(cid)" },
            { "trigger":"getPlayerParty(cid)", "contents": "getPlayerParty(cid)" },
            { "trigger":"getPlayerPosition(cid)", "contents": "getPlayerPosition(cid)" },
            { "trigger":"getPlayerPremiumDays(cid)", "contents": "getPlayerPremiumDays(cid)" },
            { "trigger":"getPlayersByAccountNumber(accountNumber)", "contents": "getPlayersByAccountNumber(accountNumber)" },
            { "trigger":"getPlayersByIPAddress(ip, mask)", "contents": "getPlayersByIPAddress(ip, mask)" },
            { "trigger":"getPlayerSex(cid)", "contents": "getPlayerSex(cid)" },
            { "trigger":"getPlayerSkill(cid, skillId)", "contents": "getPlayerSkill(cid, skillId)" },
            { "trigger":"getPlayerSkullType(cid)", "contents": "getPlayerSkullType(cid)" },
            { "trigger":"getPlayerSlotItem(cid, slot)", "contents": "getPlayerSlotItem(cid, slot)" },
            { "trigger":"getPlayerSoul(cid)", "contents": "getPlayerSoul(cid)" },
            { "trigger":"getPlayerStorageValue(cid, key)", "contents": "getPlayerStorageValue(cid, key)" },
            { "trigger":"getPlayerTown(cid)", "contents": "getPlayerTown(cid)" },
            { "trigger":"getPlayerVocation(cid)", "contents": "getPlayerVocation(cid)" },
            { "trigger":"getPromotedVocation(vocationId)", "contents": "getPromotedVocation(vocationId)" },
            { "trigger":"getPvpBlessingCost(level)", "contents": "getPvpBlessingCost(level)" },
            { "trigger":"getSpectators(centerPos, rangex, rangey, multifloor, onlyPlayers)", "contents": "getSpectators(centerPos, rangex, rangey, multifloor, onlyPlayers)" },
            { "trigger":"getThing(uid)", "contents": "getThing(uid)" },
            { "trigger":"getThingfromPos(pos)", "contents": "getThingfromPos(pos)" },
            { "trigger":"getThingPos(uid)", "contents": "getThingPos(uid)" },
            { "trigger":"getTibianTime()", "contents": "getTibianTime()" },
            { "trigger":"getTileHouseInfo(pos)", "contents": "getTileHouseInfo(pos)" },
            { "trigger":"getTileInfo(position)", "contents": "getTileInfo(position)" },
            { "trigger":"getTileItemById(position, itemId, ...)", "contents": "getTileItemById(position, itemId, ...)" },
            { "trigger":"getTileItemByType(position, itemType)", "contents": "getTileItemByType(position, itemType)" },
            { "trigger":"getTilePzInfo(position)", "contents": "getTilePzInfo(position)" },
            { "trigger":"getTileThingByPos(position)", "contents": "getTileThingByPos(position)" },
            { "trigger":"getTileThingByTopOrder(position, topOrder)", "contents": "getTileThingByTopOrder(position, topOrder)" },
            { "trigger":"getTopCreature(position)", "contents": "getTopCreature(position)" },
            { "trigger":"getTownId(townName)", "contents": "getTownId(townName)" },
            { "trigger":"getTownName(townId)", "contents": "getTownName(townId)" },
            { "trigger":"getTownTemplePosition(townId)", "contents": "getTownTemplePosition(townId)" },
            { "trigger":"getWaypointPosition(name)", "contents": "getWaypointPosition(name)" },
            { "trigger":"getWorldCreatures(type)", "contents": "getWorldCreatures(type)" },
            { "trigger":"getWorldLight()", "contents": "getWorldLight()" },
            { "trigger":"getWorldTime()", "contents": "getWorldTime()" },
            { "trigger":"getWorldUpTime()", "contents": "getWorldUpTime()" },
            { "trigger":"hasProperty(uid, prop)", "contents": "hasProperty(uid, prop)" },
            { "trigger":"isContainer(uid)", "contents": "isContainer(uid)" },
            { "trigger":"isCorpse(uid)", "contents": "isCorpse(uid)" },
            { "trigger":"isCreature(cid)", "contents": "isCreature(cid)" },
            { "trigger":"isDepot(uid)", "contents": "isDepot(uid)" },
            { "trigger":"isDruid(cid)", "contents": "isDruid(cid)" },
            { "trigger":"isInArray(array, value)", "contents": "isInArray(array, value)" },
            { "trigger":"isInRange(pos, fromPos, toPos)", "contents": "isInRange(pos, fromPos, toPos)" },
            { "trigger":"isInWar(cid, target)", "contents": "isInWar(cid, target)" },
            { "trigger":"isItem(uid)", "contents": "isItem(uid)" },
            { "trigger":"isItemContainer(itemId)", "contents": "isItemContainer(itemId)" },
            { "trigger":"isItemDoor(itemId)", "contents": "isItemDoor(itemId)" },
            { "trigger":"isItemFluidContainer(itemId)", "contents": "isItemFluidContainer(itemId)" },
            { "trigger":"isItemMovable(itemId)", "contents": "isItemMovable(itemId)" },
            { "trigger":"isItemRune(itemId)", "contents": "isItemRune(itemId)" },
            { "trigger":"isItemStackable(itemId)", "contents": "isItemStackable(itemId)" },
            { "trigger":"isKnight(cid)", "contents": "isKnight(cid)" },
            { "trigger":"isMonster(cid)", "contents": "isMonster(cid)" },
            { "trigger":"isMovable(uid)", "contents": "isMovable(uid)" },
            { "trigger":"isNpc(cid)", "contents": "isNpc(cid)" },
            { "trigger":"isNumber(str)", "contents": "isNumber(str)" },
            { "trigger":"isPaladin(cid)", "contents": "isPaladin(cid)" },
            { "trigger":"isPlayer(cid)", "contents": "isPlayer(cid)" },
            { "trigger":"isPlayerGhost(cid)", "contents": "isPlayerGhost(cid)" },
            { "trigger":"isPlayerPzLocked(cid)", "contents": "isPlayerPzLocked(cid)" },
            { "trigger":"isPremium(cid)", "contents": "isPremium(cid)" },
            { "trigger":"isSightClear(fromPos, toPos, floorCheck)", "contents": "isSightClear(fromPos, toPos, floorCheck)" },
            { "trigger":"isSorcerer(cid)", "contents": "isSorcerer(cid)" },
            { "trigger":"isSummon(cid)", "contents": "isSummon(cid)" },
            { "trigger":"isValidUID(uid)", "contents": "isValidUID(uid)" },
            { "trigger":"mayNotMove(cid, value)", "contents": "mayNotMove(cid, value)" },
            { "trigger":"numberToVariant(number)", "contents": "numberToVariant(number)" },
            { "trigger":"Player.feed(self, food)", "contents": "Player.feed(self, food)" },
            { "trigger":"Player.isUsingOtClient(self)", "contents": "Player.isUsingOtClient(self)" },
            { "trigger":"Player.sendCancelMessage(self, message)", "contents": "Player.sendCancelMessage(self, message)" },
            { "trigger":"Player.sendExtendedOpcode(self, opcode, buffer)", "contents": "Player.sendExtendedOpcode(self, opcode, buffer)" },
            { "trigger":"playerLearnInstantSpell(cid, name)", "contents": "playerLearnInstantSpell(cid, name)" },
            { "trigger":"Position.getNextPosition(self, direction, steps)", "contents": "Position.getNextPosition(self, direction, steps)" },
            { "trigger":"positionToVariant(pos)", "contents": "positionToVariant(pos)" },
            { "trigger":"pushThing(thing)", "contents": "pushThing(thing)" },
            { "trigger":"queryTileAddThing(thing, position, ...)", "contents": "queryTileAddThing(thing, position, ...)" },
            { "trigger":"registerClass(className, baseClass, newFunction)", "contents": "registerClass(className, baseClass, newFunction)" },
            { "trigger":"registerCreatureEvent(cid, name)", "contents": "registerCreatureEvent(cid, name)" },
            { "trigger":"registerEnum(value)", "contents": "registerEnum(value)" },
            { "trigger":"registerEnumIn(tableName, value)", "contents": "registerEnumIn(tableName, value)" },
            { "trigger":"registerGlobalMethod(functionName, function)", "contents": "registerGlobalMethod(functionName, function)" },
            { "trigger":"registerGlobalVariable(name, value)", "contents": "registerGlobalVariable(name, value)" },
            { "trigger":"registerMetaMethod(className, functionName, function)", "contents": "registerMetaMethod(className, functionName, function)" },
            { "trigger":"registerMethod(className, functionName, function)", "contents": "registerMethod(className, functionName, function)" },
            { "trigger":"registerTable(tableName)", "contents": "registerTable(tableName)" },
            { "trigger":"registerVariable(tableName, name, value)", "contents": "registerVariable(tableName, name, value)" },
            { "trigger":"saveServer()", "contents": "saveServer()" },
            { "trigger":"sendChannelMessage(channelId, type, message)", "contents": "sendChannelMessage(channelId, type, message)" },
            { "trigger":"sendGuildChannelMessage(guildId, type, message)", "contents": "sendGuildChannelMessage(guildId, type, message)" },
            { "trigger":"setCombatArea(combat, area)", "contents": "setCombatArea(combat, area)" },
            { "trigger":"setCombatCallBack(combat, key, function_name)", "contents": "setCombatCallBack(combat, key, function_name)" },
            { "trigger":"setCombatCondition(combat, condition)", "contents": "setCombatCondition(combat, condition)" },
            { "trigger":"setCombatFormula(combat, type, mina, minb, maxa, maxb)", "contents": "setCombatFormula(combat, type, mina, minb, maxa, maxb)" },
            { "trigger":"setCombatParam(combat, key, value)", "contents": "setCombatParam(combat, key, value)" },
            { "trigger":"setConditionFormula(combat, mina, minb, maxa, maxb)", "contents": "setConditionFormula(combat, mina, minb, maxa, maxb)" },
            { "trigger":"setConditionParam(condition, key, value)", "contents": "setConditionParam(condition, key, value)" },
            { "trigger":"setGlobalStorageValue(key, value)", "contents": "setGlobalStorageValue(key, value)" },
            { "trigger":"setHouseAccessList(id, listId, listText)", "contents": "setHouseAccessList(id, listId, listText)" },
            { "trigger":"setHouseOwner(id, guid)", "contents": "setHouseOwner(id, guid)" },
            { "trigger":"setPlayerGroupId(cid, groupId)", "contents": "setPlayerGroupId(cid, groupId)" },
            { "trigger":"setPlayerStorageValue(cid, key, value)", "contents": "setPlayerStorageValue(cid, key, value)" },
            { "trigger":"stopEvent(eventid)", "contents": "stopEvent(eventid)" },
            { "trigger":"string.split(str, sep)", "contents": "string.split(str, sep)" },
            { "trigger":"stringToVariant(string)", "contents": "stringToVariant(string)" },
            { "trigger":"targetPositionToVariant(pos)", "contents": "targetPositionToVariant(pos)" },
            { "trigger":"unregisterCreatureEvent(cid, name)", "contents": "unregisterCreatureEvent(cid, name)" },
            { "trigger":"variantToNumber(var)", "contents": "variantToNumber(var)" },
            { "trigger":"variantToPosition(var)", "contents": "variantToPosition(var)" },
            { "trigger":"variantToString(var)", "contents": "variantToString(var)" },
            { "trigger":"combat:execute(creature, variant)", "contents": "combat:execute(creature, variant)" },
            { "trigger":"combat:setArea(area)", "contents": "combat:setArea(area)" },
            { "trigger":"combat:setCallBack(key, function)", "contents": "combat:setCallBack(key, function)" },
            { "trigger":"combat:setCondition(condition)", "contents": "combat:setCondition(condition)" },
            { "trigger":"combat:setFormula(type, mina, minb, maxa, maxb)", "contents": "combat:setFormula(type, mina, minb, maxa, maxb)" },
            { "trigger":"combat:setOrigin(origin)", "contents": "combat:setOrigin(origin)" },
            { "trigger":"combat:setParameter(key, value)condition:addDamage(rounds, time, value)", "contents": "combat:setParameter(key, value)condition:addDamage(rounds, time, value)" },
            { "trigger":"condition:addOutfit(lookTypeEx, lookType, lookHead, lookBody, lookLegs, lookFeet[, lookAddons[, lookMount]])", "contents": "condition:addOutfit(lookTypeEx, lookType, lookHead, lookBody, lookLegs, lookFeet[, lookAddons[, lookMount]])" },
            { "trigger":"condition:addOutfit(outfit)", "contents": "condition:addOutfit(outfit)" },
            { "trigger":"condition:clone()", "contents": "condition:clone()" },
            { "trigger":"condition:getEndTime()", "contents": "condition:getEndTime()" },
            { "trigger":"condition:getIcons()", "contents": "condition:getIcons()" },
            { "trigger":"condition:getId()", "contents": "condition:getId()" },
            { "trigger":"condition:getSubId()", "contents": "condition:getSubId()" },
            { "trigger":"condition:getTicks()", "contents": "condition:getTicks()" },
            { "trigger":"condition:getType()", "contents": "condition:getType()" },
            { "trigger":"condition:setFormula(mina, minb, maxa, maxb)", "contents": "condition:setFormula(mina, minb, maxa, maxb)" },
            { "trigger":"condition:setParameter(key, value)", "contents": "condition:setParameter(key, value)" },
            { "trigger":"condition:setTicks(ticks)container:addItem(itemId[, count/subType = 1[, index = INDEX_WHEREEVER[, flags = 0]]])", "contents": "condition:setTicks(ticks)container:addItem(itemId[, count/subType = 1[, index = INDEX_WHEREEVER[, flags = 0]]])" },
            { "trigger":"container:addItemEx(item[, index = INDEX_WHEREEVER[, flags = 0]])", "contents": "container:addItemEx(item[, index = INDEX_WHEREEVER[, flags = 0]])" },
            { "trigger":"container:getCapacity()", "contents": "container:getCapacity()" },
            { "trigger":"container:getEmptySlots([recursive = false])", "contents": "container:getEmptySlots([recursive = false])" },
            { "trigger":"container:getItem(index)", "contents": "container:getItem(index)" },
            { "trigger":"container:getItemCountById(itemId[, subType = -1])", "contents": "container:getItemCountById(itemId[, subType = -1])" },
            { "trigger":"container:getItemHoldingCount()", "contents": "container:getItemHoldingCount()" },
            { "trigger":"container:getSize()", "contents": "container:getSize()" },
            { "trigger":"container:hasItem(item)", "contents": "container:hasItem(item)" },
            { "trigger":"container:isContainer()creature:addCondition(condition[, force = false])", "contents": "container:isContainer()creature:addCondition(condition[, force = false])" },
            { "trigger":"creature:addHealth(healthChange)", "contents": "creature:addHealth(healthChange)" },
            { "trigger":"creature:addMana(manaChange[, animationOnLoss = false])", "contents": "creature:addMana(manaChange[, animationOnLoss = false])" },
            { "trigger":"creature:canSee(position)", "contents": "creature:canSee(position)" },
            { "trigger":"creature:canSeeCreature(creature)", "contents": "creature:canSeeCreature(creature)" },
            { "trigger":"creature:changeSpeed(delta)", "contents": "creature:changeSpeed(delta)" },
            { "trigger":"creature:getBaseSpeed()", "contents": "creature:getBaseSpeed()" },
            { "trigger":"creature:getCondition(conditionType[, conditionId = CONDITIONID_COMBAT[, subId = 0]])", "contents": "creature:getCondition(conditionType[, conditionId = CONDITIONID_COMBAT[, subId = 0]])" },
            { "trigger":"creature:getDamageMap()", "contents": "creature:getDamageMap()" },
            { "trigger":"creature:getDescription(distance)", "contents": "creature:getDescription(distance)" },
            { "trigger":"creature:getDirection()", "contents": "creature:getDirection()" },
            { "trigger":"creature:getFollowCreature()", "contents": "creature:getFollowCreature()" },
            { "trigger":"creature:getHealth()", "contents": "creature:getHealth()" },
            { "trigger":"creature:getId()", "contents": "creature:getId()" },
            { "trigger":"creature:getLight()", "contents": "creature:getLight()" },
            { "trigger":"creature:getMana()", "contents": "creature:getMana()" },
            { "trigger":"creature:getMaster()", "contents": "creature:getMaster()" },
            { "trigger":"creature:getMaxHealth()", "contents": "creature:getMaxHealth()" },
            { "trigger":"creature:getMaxMana()", "contents": "creature:getMaxMana()" },
            { "trigger":"creature:getName()", "contents": "creature:getName()" },
            { "trigger":"creature:getOutfit()", "contents": "creature:getOutfit()" },
            { "trigger":"creature:getParent()", "contents": "creature:getParent()" },
            { "trigger":"creature:getPathTo(pos[, minTargetDist = 0[, maxTargetDist = 1[, fullPathSearch = true[, clearSight = true[, maxSearchDist = 0]]]]])", "contents": "creature:getPathTo(pos[, minTargetDist = 0[, maxTargetDist = 1[, fullPathSearch = true[, clearSight = true[, maxSearchDist = 0]]]]])" },
            { "trigger":"creature:getPosition()", "contents": "creature:getPosition()" },
            { "trigger":"creature:getSpeed()", "contents": "creature:getSpeed()" },
            { "trigger":"creature:getSummons()", "contents": "creature:getSummons()" },
            { "trigger":"creature:getTarget()", "contents": "creature:getTarget()" },
            { "trigger":"creature:getTile()", "contents": "creature:getTile()" },
            { "trigger":"creature:isCreature()", "contents": "creature:isCreature()" },
            { "trigger":"creature:isHealthHidden()", "contents": "creature:isHealthHidden()" },
            { "trigger":"creature:isInGhostMode()", "contents": "creature:isInGhostMode()" },
            { "trigger":"creature:isItem()", "contents": "creature:isItem()" },
            { "trigger":"creature:isMonster()", "contents": "creature:isMonster()" },
            { "trigger":"creature:isNpc()", "contents": "creature:isNpc()" },
            { "trigger":"creature:isPlayer()", "contents": "creature:isPlayer()" },
            { "trigger":"creature:isRemoved()", "contents": "creature:isRemoved()" },
            { "trigger":"creature:registerEvent(name)", "contents": "creature:registerEvent(name)" },
            { "trigger":"creature:remove()", "contents": "creature:remove()" },
            { "trigger":"creature:removeCondition(conditionType[, conditionId = CONDITIONID_COMBAT[, subId = 0[, force = false]]])", "contents": "creature:removeCondition(conditionType[, conditionId = CONDITIONID_COMBAT[, subId = 0[, force = false]]])" },
            { "trigger":"creature:say(text, type[, ghost = false[, target = nullptr[, position]]])", "contents": "creature:say(text, type[, ghost = false[, target = nullptr[, position]]])" },
            { "trigger":"creature:setDirection(direction)", "contents": "creature:setDirection(direction)" },
            { "trigger":"creature:setDropLoot(doDrop)", "contents": "creature:setDropLoot(doDrop)" },
            { "trigger":"creature:setFollowCreature(followedCreature)", "contents": "creature:setFollowCreature(followedCreature)" },
            { "trigger":"creature:setHiddenHealth(hide)", "contents": "creature:setHiddenHealth(hide)" },
            { "trigger":"creature:setLight(color, level)", "contents": "creature:setLight(color, level)" },
            { "trigger":"creature:setMaster(master)", "contents": "creature:setMaster(master)" },
            { "trigger":"creature:setMaxHealth(maxHealth)", "contents": "creature:setMaxHealth(maxHealth)" },
            { "trigger":"creature:setOutfit(outfit)", "contents": "creature:setOutfit(outfit)" },
            { "trigger":"creature:setTarget(target)", "contents": "creature:setTarget(target)" },
            { "trigger":"creature:teleportTo(position[, pushMovement = false])", "contents": "creature:teleportTo(position[, pushMovement = false])" },
            { "trigger":"creature:unregisterEvent(name)Game.createItem(itemId, count[, position])", "contents": "creature:unregisterEvent(name)Game.createItem(itemId, count[, position])" },
            { "trigger":"Game.createMonster(monsterName, position[, extended = false[, force = false]])", "contents": "Game.createMonster(monsterName, position[, extended = false[, force = false]])" },
            { "trigger":"Game.createNpc(npcName, position[, extended = false[, force = false]])", "contents": "Game.createNpc(npcName, position[, extended = false[, force = false]])" },
            { "trigger":"Game.createTile(position[, isDynamic = false])", "contents": "Game.createTile(position[, isDynamic = false])" },
            { "trigger":"Game.createTile(x, y, z[, isDynamic = false])", "contents": "Game.createTile(x, y, z[, isDynamic = false])" },
            { "trigger":"Game.getExperienceStage(level)", "contents": "Game.getExperienceStage(level)" },
            { "trigger":"Game.getGameState()", "contents": "Game.getGameState()" },
            { "trigger":"Game.getHouses()", "contents": "Game.getHouses()" },
            { "trigger":"Game.getMonsterCount()", "contents": "Game.getMonsterCount()" },
            { "trigger":"Game.getNpcCount()", "contents": "Game.getNpcCount()" },
            { "trigger":"Game.getPlayerCount()", "contents": "Game.getPlayerCount()" },
            { "trigger":"Game.getPlayers()", "contents": "Game.getPlayers()" },
            { "trigger":"Game.getReturnMessage(value)", "contents": "Game.getReturnMessage(value)" },
            { "trigger":"Game.getSpectators(position[, multifloor = false[, onlyPlayer = false[, minRangeX = 0[, maxRangeX = 0[, minRangeY = 0[, maxRangeY = 0]]]]]])", "contents": "Game.getSpectators(position[, multifloor = false[, onlyPlayer = false[, minRangeX = 0[, maxRangeX = 0[, minRangeY = 0[, maxRangeY = 0]]]]]])" },
            { "trigger":"Game.getTowns()", "contents": "Game.getTowns()" },
            { "trigger":"Game.getWorldType()", "contents": "Game.getWorldType()" },
            { "trigger":"Game.loadMap(path)", "contents": "Game.loadMap(path)" },
            { "trigger":"Game.setGameState(state)", "contents": "Game.setGameState(state)" },
            { "trigger":"Game.setWorldType(type)", "contents": "Game.setWorldType(type)" },
            { "trigger":"Game.startRaid(raidName)group:getAccess()", "contents": "Game.startRaid(raidName)group:getAccess()" },
            { "trigger":"group:getFlags()", "contents": "group:getFlags()" },
            { "trigger":"group:getId()", "contents": "group:getId()" },
            { "trigger":"group:getMaxDepotItems()", "contents": "group:getMaxDepotItems()" },
            { "trigger":"group:getMaxVipEntries()", "contents": "group:getMaxVipEntries()" },
            { "trigger":"group:getName()guild:addMember(player)", "contents": "group:getName()guild:addMember(player)" },
            { "trigger":"guild:addRank(id, name, level)", "contents": "guild:addRank(id, name, level)" },
            { "trigger":"guild:getId()", "contents": "guild:getId()" },
            { "trigger":"guild:getMembersOnline()", "contents": "guild:getMembersOnline()" },
            { "trigger":"guild:getMotd()", "contents": "guild:getMotd()" },
            { "trigger":"guild:getName()", "contents": "guild:getName()" },
            { "trigger":"guild:getRankById(id)", "contents": "guild:getRankById(id)" },
            { "trigger":"guild:getRankByLevel(level)", "contents": "guild:getRankByLevel(level)" },
            { "trigger":"guild:removeMember(player)", "contents": "guild:removeMember(player)" },
            { "trigger":"guild:setMotd(motd)", "contents": "guild:setMotd(motd)" },
            { "trigger":"house:getAccessList(listId)", "contents": "house:getAccessList(listId)" },
            { "trigger":"house:getBedCount()", "contents": "house:getBedCount()" },
            { "trigger":"house:getBeds()", "contents": "house:getBeds()" },
            { "trigger":"house:getDoorCount()", "contents": "house:getDoorCount()" },
            { "trigger":"house:getDoors()", "contents": "house:getDoors()" },
            { "trigger":"house:getExitPosition()", "contents": "house:getExitPosition()" },
            { "trigger":"house:getId()", "contents": "house:getId()" },
            { "trigger":"house:getName()", "contents": "house:getName()" },
            { "trigger":"house:getOwnerGuid()", "contents": "house:getOwnerGuid()" },
            { "trigger":"house:getRent()", "contents": "house:getRent()" },
            { "trigger":"house:getTileCount()", "contents": "house:getTileCount()" },
            { "trigger":"house:getTiles()", "contents": "house:getTiles()" },
            { "trigger":"house:getTown()", "contents": "house:getTown()" },
            { "trigger":"house:setAccessList(listId, list)", "contents": "house:setAccessList(listId, list)" },
            { "trigger":"house:setOwnerGuid(guid[, updateDatabase = true])isType(derived, base)", "contents": "house:setOwnerGuid(guid[, updateDatabase = true])isType(derived, base)" },
            { "trigger":"item:clone()", "contents": "item:clone()" },
            { "trigger":"item:decay()", "contents": "item:decay()" },
            { "trigger":"item:getActionId()", "contents": "item:getActionId()" },
            { "trigger":"item:getArticle()", "contents": "item:getArticle()" },
            { "trigger":"item:getAttribute(key)", "contents": "item:getAttribute(key)" },
            { "trigger":"item:getCharges()", "contents": "item:getCharges()" },
            { "trigger":"item:getCount()", "contents": "item:getCount()" },
            { "trigger":"item:getDescription(distance)", "contents": "item:getDescription(distance)" },
            { "trigger":"item:getFluidType()", "contents": "item:getFluidType()" },
            { "trigger":"item:getId()", "contents": "item:getId()" },
            { "trigger":"item:getName()", "contents": "item:getName()" },
            { "trigger":"item:getParent()", "contents": "item:getParent()" },
            { "trigger":"item:getPluralName()", "contents": "item:getPluralName()" },
            { "trigger":"item:getPosition()", "contents": "item:getPosition()" },
            { "trigger":"item:getSubType()", "contents": "item:getSubType()" },
            { "trigger":"item:getTile()", "contents": "item:getTile()" },
            { "trigger":"item:getTopParent()", "contents": "item:getTopParent()" },
            { "trigger":"item:getType()", "contents": "item:getType()" },
            { "trigger":"item:getUniqueId()", "contents": "item:getUniqueId()" },
            { "trigger":"item:hasProperty(property)", "contents": "item:hasProperty(property)" },
            { "trigger":"item:isContainer()", "contents": "item:isContainer()" },
            { "trigger":"item:isCreature()", "contents": "item:isCreature()" },
            { "trigger":"item:isItem()", "contents": "item:isItem()" },
            { "trigger":"item:isTeleport()", "contents": "item:isTeleport()" },
            { "trigger":"item:moveTo(position)", "contents": "item:moveTo(position)" },
            { "trigger":"item:remove([count = -1])", "contents": "item:remove([count = -1])" },
            { "trigger":"item:removeAttribute(key)", "contents": "item:removeAttribute(key)" },
            { "trigger":"item:setActionId(actionId)", "contents": "item:setActionId(actionId)" },
            { "trigger":"item:setAttribute(key, value)", "contents": "item:setAttribute(key, value)" },
            { "trigger":"item:split([count = 1])", "contents": "item:split([count = 1])" },
            { "trigger":"item:transform(itemId[, count/subType = -1])itemType:getArmor()", "contents": "item:transform(itemId[, count/subType = -1])itemType:getArmor()" },
            { "trigger":"itemType:getArticle()", "contents": "itemType:getArticle()" },
            { "trigger":"itemType:getAttack()", "contents": "itemType:getAttack()" },
            { "trigger":"itemType:getCapacity()", "contents": "itemType:getCapacity()" },
            { "trigger":"itemType:getDecayId()", "contents": "itemType:getDecayId()" },
            { "trigger":"itemType:getDefense()", "contents": "itemType:getDefense()" },
            { "trigger":"itemType:getDescription()", "contents": "itemType:getDescription()" },
            { "trigger":"itemType:getElementDamage()", "contents": "itemType:getElementDamage()" },
            { "trigger":"itemType:getElementType()", "contents": "itemType:getElementType()" },
            { "trigger":"itemType:getExtraDefense()", "contents": "itemType:getExtraDefense()" },
            { "trigger":"itemType:getFluidSource()", "contents": "itemType:getFluidSource()" },
            { "trigger":"itemType:getId()", "contents": "itemType:getId()" },
            { "trigger":"itemType:getName()", "contents": "itemType:getName()" },
            { "trigger":"itemType:getPluralName()", "contents": "itemType:getPluralName()" },
            { "trigger":"itemType:getSlotPosition()", "contents": "itemType:getSlotPosition()" },
            { "trigger":"itemType:getTransformDeEquipId()", "contents": "itemType:getTransformDeEquipId()" },
            { "trigger":"itemType:getTransformEquipId()", "contents": "itemType:getTransformEquipId()" },
            { "trigger":"itemType:getType()", "contents": "itemType:getType()" },
            { "trigger":"itemType:getWeaponType()", "contents": "itemType:getWeaponType()" },
            { "trigger":"itemType:getWeight([count = 1[, precise = true]])", "contents": "itemType:getWeight([count = 1[, precise = true]])" },
            { "trigger":"itemType:hasSubType()", "contents": "itemType:hasSubType()" },
            { "trigger":"itemType:isContainer()", "contents": "itemType:isContainer()" },
            { "trigger":"itemType:isCorpse()", "contents": "itemType:isCorpse()" },
            { "trigger":"itemType:isDoor()", "contents": "itemType:isDoor()" },
            { "trigger":"itemType:isFluidContainer()", "contents": "itemType:isFluidContainer()" },
            { "trigger":"itemType:isMovable()", "contents": "itemType:isMovable()" },
            { "trigger":"itemType:isReadable()", "contents": "itemType:isReadable()" },
            { "trigger":"itemType:isRune()", "contents": "itemType:isRune()" },
            { "trigger":"itemType:isStackable()", "contents": "itemType:isStackable()" },
            { "trigger":"itemType:isWritable()", "contents": "itemType:isWritable()" },
            { "trigger":"combat:execute(creature, variant)", "contents": "combat:execute(creature, variant)" },
            { "trigger":"combat:setArea(area)", "contents": "combat:setArea(area)" },
            { "trigger":"combat:setCallBack(key, function)", "contents": "combat:setCallBack(key, function)" },
            { "trigger":"combat:setCondition(condition)", "contents": "combat:setCondition(condition)" },
            { "trigger":"combat:setFormula(type, mina, minb, maxa, maxb)", "contents": "combat:setFormula(type, mina, minb, maxa, maxb)" },
            { "trigger":"combat:setOrigin(origin)", "contents": "combat:setOrigin(origin)" },
            { "trigger":"combat:setParameter(key, value)condition:addDamage(rounds, time, value)", "contents": "combat:setParameter(key, value)condition:addDamage(rounds, time, value)" },
            { "trigger":"condition:addOutfit(lookTypeEx, lookType, lookHead, lookBody, lookLegs, lookFeet[, lookAddons[, lookMount]])", "contents": "condition:addOutfit(lookTypeEx, lookType, lookHead, lookBody, lookLegs, lookFeet[, lookAddons[, lookMount]])" },
            { "trigger":"condition:addOutfit(outfit)", "contents": "condition:addOutfit(outfit)" },
            { "trigger":"condition:clone()", "contents": "condition:clone()" },
            { "trigger":"condition:getEndTime()", "contents": "condition:getEndTime()" },
            { "trigger":"condition:getIcons()", "contents": "condition:getIcons()" },
            { "trigger":"condition:getId()", "contents": "condition:getId()" },
            { "trigger":"condition:getSubId()", "contents": "condition:getSubId()" },
            { "trigger":"condition:getTicks()", "contents": "condition:getTicks()" },
            { "trigger":"condition:getType()", "contents": "condition:getType()" },
            { "trigger":"condition:setFormula(mina, minb, maxa, maxb)", "contents": "condition:setFormula(mina, minb, maxa, maxb)" },
            { "trigger":"condition:setParameter(key, value)", "contents": "condition:setParameter(key, value)" },
            { "trigger":"condition:setTicks(ticks)container:addItem(itemId[, count/subType = 1[, index = INDEX_WHEREEVER[, flags = 0]]])", "contents": "condition:setTicks(ticks)container:addItem(itemId[, count/subType = 1[, index = INDEX_WHEREEVER[, flags = 0]]])" },
            { "trigger":"container:addItemEx(item[, index = INDEX_WHEREEVER[, flags = 0]])", "contents": "container:addItemEx(item[, index = INDEX_WHEREEVER[, flags = 0]])" },
            { "trigger":"container:getCapacity()", "contents": "container:getCapacity()" },
            { "trigger":"container:getEmptySlots([recursive = false])", "contents": "container:getEmptySlots([recursive = false])" },
            { "trigger":"container:getItem(index)", "contents": "container:getItem(index)" },
            { "trigger":"container:getItemCountById(itemId[, subType = -1])", "contents": "container:getItemCountById(itemId[, subType = -1])" },
            { "trigger":"container:getItemHoldingCount()", "contents": "container:getItemHoldingCount()" },
            { "trigger":"container:getSize()", "contents": "container:getSize()" },
            { "trigger":"container:hasItem(item)", "contents": "container:hasItem(item)" },
            { "trigger":"container:isContainer()creature:addCondition(condition[, force = false])", "contents": "container:isContainer()creature:addCondition(condition[, force = false])" },
            { "trigger":"creature:addHealth(healthChange)", "contents": "creature:addHealth(healthChange)" },
            { "trigger":"creature:addMana(manaChange[, animationOnLoss = false])", "contents": "creature:addMana(manaChange[, animationOnLoss = false])" },
            { "trigger":"creature:canSee(position)", "contents": "creature:canSee(position)" },
            { "trigger":"creature:canSeeCreature(creature)", "contents": "creature:canSeeCreature(creature)" },
            { "trigger":"creature:changeSpeed(delta)", "contents": "creature:changeSpeed(delta)" },
            { "trigger":"creature:getBaseSpeed()", "contents": "creature:getBaseSpeed()" },
            { "trigger":"creature:getCondition(conditionType[, conditionId = CONDITIONID_COMBAT[, subId = 0]])", "contents": "creature:getCondition(conditionType[, conditionId = CONDITIONID_COMBAT[, subId = 0]])" },
            { "trigger":"creature:getDamageMap()", "contents": "creature:getDamageMap()" },
            { "trigger":"creature:getDescription(distance)", "contents": "creature:getDescription(distance)" },
            { "trigger":"creature:getDirection()", "contents": "creature:getDirection()" },
            { "trigger":"creature:getFollowCreature()", "contents": "creature:getFollowCreature()" },
            { "trigger":"creature:getHealth()", "contents": "creature:getHealth()" },
            { "trigger":"creature:getId()", "contents": "creature:getId()" },
            { "trigger":"creature:getLight()", "contents": "creature:getLight()" },
            { "trigger":"creature:getMana()", "contents": "creature:getMana()" },
            { "trigger":"creature:getMaster()", "contents": "creature:getMaster()" },
            { "trigger":"creature:getMaxHealth()", "contents": "creature:getMaxHealth()" },
            { "trigger":"creature:getMaxMana()", "contents": "creature:getMaxMana()" },
            { "trigger":"creature:getName()", "contents": "creature:getName()" },
            { "trigger":"creature:getOutfit()", "contents": "creature:getOutfit()" },
            { "trigger":"creature:getParent()", "contents": "creature:getParent()" },
            { "trigger":"creature:getPathTo(pos[, minTargetDist = 0[, maxTargetDist = 1[, fullPathSearch = true[, clearSight = true[, maxSearchDist = 0]]]]])", "contents": "creature:getPathTo(pos[, minTargetDist = 0[, maxTargetDist = 1[, fullPathSearch = true[, clearSight = true[, maxSearchDist = 0]]]]])" },
            { "trigger":"creature:getPosition()", "contents": "creature:getPosition()" },
            { "trigger":"creature:getSpeed()", "contents": "creature:getSpeed()" },
            { "trigger":"creature:getSummons()", "contents": "creature:getSummons()" },
            { "trigger":"creature:getTarget()", "contents": "creature:getTarget()" },
            { "trigger":"creature:getTile()", "contents": "creature:getTile()" },
            { "trigger":"creature:isCreature()", "contents": "creature:isCreature()" },
            { "trigger":"creature:isHealthHidden()", "contents": "creature:isHealthHidden()" },
            { "trigger":"creature:isInGhostMode()", "contents": "creature:isInGhostMode()" },
            { "trigger":"creature:isItem()", "contents": "creature:isItem()" },
            { "trigger":"creature:isMonster()", "contents": "creature:isMonster()" },
            { "trigger":"creature:isNpc()", "contents": "creature:isNpc()" },
            { "trigger":"creature:isPlayer()", "contents": "creature:isPlayer()" },
            { "trigger":"creature:isRemoved()", "contents": "creature:isRemoved()" },
            { "trigger":"creature:registerEvent(name)", "contents": "creature:registerEvent(name)" },
            { "trigger":"creature:remove()", "contents": "creature:remove()" },
            { "trigger":"creature:removeCondition(conditionType[, conditionId = CONDITIONID_COMBAT[, subId = 0[, force = false]]])", "contents": "creature:removeCondition(conditionType[, conditionId = CONDITIONID_COMBAT[, subId = 0[, force = false]]])" },
            { "trigger":"creature:say(text, type[, ghost = false[, target = nullptr[, position]]])", "contents": "creature:say(text, type[, ghost = false[, target = nullptr[, position]]])" },
            { "trigger":"creature:setDirection(direction)", "contents": "creature:setDirection(direction)" },
            { "trigger":"creature:setDropLoot(doDrop)", "contents": "creature:setDropLoot(doDrop)" },
            { "trigger":"creature:setFollowCreature(followedCreature)", "contents": "creature:setFollowCreature(followedCreature)" },
            { "trigger":"creature:setHiddenHealth(hide)", "contents": "creature:setHiddenHealth(hide)" },
            { "trigger":"creature:setLight(color, level)", "contents": "creature:setLight(color, level)" },
            { "trigger":"creature:setMaster(master)", "contents": "creature:setMaster(master)" },
            { "trigger":"creature:setMaxHealth(maxHealth)", "contents": "creature:setMaxHealth(maxHealth)" },
            { "trigger":"creature:setOutfit(outfit)", "contents": "creature:setOutfit(outfit)" },
            { "trigger":"creature:setTarget(target)", "contents": "creature:setTarget(target)" },
            { "trigger":"creature:teleportTo(position[, pushMovement = false])", "contents": "creature:teleportTo(position[, pushMovement = false])" },
            { "trigger":"creature:unregisterEvent(name)Game.createItem(itemId, count[, position])", "contents": "creature:unregisterEvent(name)Game.createItem(itemId, count[, position])" },
            { "trigger":"Game.createMonster(monsterName, position[, extended = false[, force = false]])", "contents": "Game.createMonster(monsterName, position[, extended = false[, force = false]])" },
            { "trigger":"Game.createNpc(npcName, position[, extended = false[, force = false]])", "contents": "Game.createNpc(npcName, position[, extended = false[, force = false]])" },
            { "trigger":"Game.createTile(position[, isDynamic = false])", "contents": "Game.createTile(position[, isDynamic = false])" },
            { "trigger":"Game.createTile(x, y, z[, isDynamic = false])", "contents": "Game.createTile(x, y, z[, isDynamic = false])" },
            { "trigger":"Game.getExperienceStage(level)", "contents": "Game.getExperienceStage(level)" },
            { "trigger":"Game.getGameState()", "contents": "Game.getGameState()" },
            { "trigger":"Game.getHouses()", "contents": "Game.getHouses()" },
            { "trigger":"Game.getMonsterCount()", "contents": "Game.getMonsterCount()" },
            { "trigger":"Game.getNpcCount()", "contents": "Game.getNpcCount()" },
            { "trigger":"Game.getPlayerCount()", "contents": "Game.getPlayerCount()" },
            { "trigger":"Game.getPlayers()", "contents": "Game.getPlayers()" },
            { "trigger":"Game.getReturnMessage(value)", "contents": "Game.getReturnMessage(value)" },
            { "trigger":"Game.getSpectators(position[, multifloor = false[, onlyPlayer = false[, minRangeX = 0[, maxRangeX = 0[, minRangeY = 0[, maxRangeY = 0]]]]]])", "contents": "Game.getSpectators(position[, multifloor = false[, onlyPlayer = false[, minRangeX = 0[, maxRangeX = 0[, minRangeY = 0[, maxRangeY = 0]]]]]])" },
            { "trigger":"Game.getTowns()", "contents": "Game.getTowns()" },
            { "trigger":"Game.getWorldType()", "contents": "Game.getWorldType()" },
            { "trigger":"Game.loadMap(path)", "contents": "Game.loadMap(path)" },
            { "trigger":"Game.setGameState(state)", "contents": "Game.setGameState(state)" },
            { "trigger":"Game.setWorldType(type)", "contents": "Game.setWorldType(type)" },
            { "trigger":"Game.startRaid(raidName)group:getAccess()", "contents": "Game.startRaid(raidName)group:getAccess()" },
            { "trigger":"group:getFlags()", "contents": "group:getFlags()" },
            { "trigger":"group:getId()", "contents": "group:getId()" },
            { "trigger":"group:getMaxDepotItems()", "contents": "group:getMaxDepotItems()" },
            { "trigger":"group:getMaxVipEntries()", "contents": "group:getMaxVipEntries()" },
            { "trigger":"group:getName()guild:addMember(player)", "contents": "group:getName()guild:addMember(player)" },
            { "trigger":"guild:addRank(id, name, level)", "contents": "guild:addRank(id, name, level)" },
            { "trigger":"guild:getId()", "contents": "guild:getId()" },
            { "trigger":"guild:getMembersOnline()", "contents": "guild:getMembersOnline()" },
            { "trigger":"guild:getMotd()", "contents": "guild:getMotd()" },
            { "trigger":"guild:getName()", "contents": "guild:getName()" },
            { "trigger":"guild:getRankById(id)", "contents": "guild:getRankById(id)" },
            { "trigger":"guild:getRankByLevel(level)", "contents": "guild:getRankByLevel(level)" },
            { "trigger":"guild:removeMember(player)", "contents": "guild:removeMember(player)" },
            { "trigger":"guild:setMotd(motd)", "contents": "guild:setMotd(motd)" },
            { "trigger":"house:getAccessList(listId)", "contents": "house:getAccessList(listId)" },
            { "trigger":"house:getBedCount()", "contents": "house:getBedCount()" },
            { "trigger":"house:getBeds()", "contents": "house:getBeds()" },
            { "trigger":"house:getDoorCount()", "contents": "house:getDoorCount()" },
            { "trigger":"house:getDoors()", "contents": "house:getDoors()" },
            { "trigger":"house:getExitPosition()", "contents": "house:getExitPosition()" },
            { "trigger":"house:getId()", "contents": "house:getId()" },
            { "trigger":"house:getName()", "contents": "house:getName()" },
            { "trigger":"house:getOwnerGuid()", "contents": "house:getOwnerGuid()" },
            { "trigger":"house:getRent()", "contents": "house:getRent()" },
            { "trigger":"house:getTileCount()", "contents": "house:getTileCount()" },
            { "trigger":"house:getTiles()", "contents": "house:getTiles()" },
            { "trigger":"house:getTown()", "contents": "house:getTown()" },
            { "trigger":"house:setAccessList(listId, list)", "contents": "house:setAccessList(listId, list)" },
            { "trigger":"house:setOwnerGuid(guid[, updateDatabase = true])isType(derived, base)", "contents": "house:setOwnerGuid(guid[, updateDatabase = true])isType(derived, base)" },
            { "trigger":"item:clone()", "contents": "item:clone()" },
            { "trigger":"item:decay()", "contents": "item:decay()" },
            { "trigger":"item:getActionId()", "contents": "item:getActionId()" },
            { "trigger":"item:getArticle()", "contents": "item:getArticle()" },
            { "trigger":"item:getAttribute(key)", "contents": "item:getAttribute(key)" },
            { "trigger":"item:getCharges()", "contents": "item:getCharges()" },
            { "trigger":"item:getCount()", "contents": "item:getCount()" },
            { "trigger":"item:getDescription(distance)", "contents": "item:getDescription(distance)" },
            { "trigger":"item:getFluidType()", "contents": "item:getFluidType()" },
            { "trigger":"item:getId()", "contents": "item:getId()" },
            { "trigger":"item:getName()", "contents": "item:getName()" },
            { "trigger":"item:getParent()", "contents": "item:getParent()" },
            { "trigger":"item:getPluralName()", "contents": "item:getPluralName()" },
            { "trigger":"item:getPosition()", "contents": "item:getPosition()" },
            { "trigger":"item:getSubType()", "contents": "item:getSubType()" },
            { "trigger":"item:getTile()", "contents": "item:getTile()" },
            { "trigger":"item:getTopParent()", "contents": "item:getTopParent()" },
            { "trigger":"item:getType()", "contents": "item:getType()" },
            { "trigger":"item:getUniqueId()", "contents": "item:getUniqueId()" },
            { "trigger":"item:hasProperty(property)", "contents": "item:hasProperty(property)" },
            { "trigger":"item:isContainer()", "contents": "item:isContainer()" },
            { "trigger":"item:isCreature()", "contents": "item:isCreature()" },
            { "trigger":"item:isItem()", "contents": "item:isItem()" },
            { "trigger":"item:isTeleport()", "contents": "item:isTeleport()" },
            { "trigger":"item:moveTo(position)", "contents": "item:moveTo(position)" },
            { "trigger":"item:remove([count = -1])", "contents": "item:remove([count = -1])" },
            { "trigger":"item:removeAttribute(key)", "contents": "item:removeAttribute(key)" },
            { "trigger":"item:setActionId(actionId)", "contents": "item:setActionId(actionId)" },
            { "trigger":"item:setAttribute(key, value)", "contents": "item:setAttribute(key, value)" },
            { "trigger":"item:split([count = 1])", "contents": "item:split([count = 1])" },
            { "trigger":"item:transform(itemId[, count/subType = -1])itemType:getArmor()", "contents": "item:transform(itemId[, count/subType = -1])itemType:getArmor()" },
            { "trigger":"itemType:getArticle()", "contents": "itemType:getArticle()" },
            { "trigger":"itemType:getAttack()", "contents": "itemType:getAttack()" },
            { "trigger":"itemType:getCapacity()", "contents": "itemType:getCapacity()" },
            { "trigger":"itemType:getDecayId()", "contents": "itemType:getDecayId()" },
            { "trigger":"itemType:getDefense()", "contents": "itemType:getDefense()" },
            { "trigger":"itemType:getDescription()", "contents": "itemType:getDescription()" },
            { "trigger":"itemType:getElementDamage()", "contents": "itemType:getElementDamage()" },
            { "trigger":"itemType:getElementType()", "contents": "itemType:getElementType()" },
            { "trigger":"itemType:getExtraDefense()", "contents": "itemType:getExtraDefense()" },
            { "trigger":"itemType:getFluidSource()", "contents": "itemType:getFluidSource()" },
            { "trigger":"itemType:getId()", "contents": "itemType:getId()" },
            { "trigger":"itemType:getName()", "contents": "itemType:getName()" },
            { "trigger":"itemType:getPluralName()", "contents": "itemType:getPluralName()" },
            { "trigger":"itemType:getSlotPosition()", "contents": "itemType:getSlotPosition()" },
            { "trigger":"itemType:getTransformDeEquipId()", "contents": "itemType:getTransformDeEquipId()" },
            { "trigger":"itemType:getTransformEquipId()", "contents": "itemType:getTransformEquipId()" },
            { "trigger":"itemType:getType()", "contents": "itemType:getType()" },
            { "trigger":"itemType:getWeaponType()", "contents": "itemType:getWeaponType()" },
            { "trigger":"itemType:getWeight([count = 1[, precise = true]])", "contents": "itemType:getWeight([count = 1[, precise = true]])" },
            { "trigger":"itemType:hasSubType()", "contents": "itemType:hasSubType()" },
            { "trigger":"itemType:isContainer()", "contents": "itemType:isContainer()" },
            { "trigger":"itemType:isCorpse()", "contents": "itemType:isCorpse()" },
            { "trigger":"itemType:isDoor()", "contents": "itemType:isDoor()" },
            { "trigger":"itemType:isFluidContainer()", "contents": "itemType:isFluidContainer()" },
            { "trigger":"itemType:isMovable()", "contents": "itemType:isMovable()" },
            { "trigger":"itemType:isReadable()", "contents": "itemType:isReadable()" },
            { "trigger":"itemType:isRune()", "contents": "itemType:isRune()" },
            { "trigger":"itemType:isStackable()", "contents": "itemType:isStackable()" },
            { "trigger":"itemType:isWritable() modalWindow:addButton(id, text)", "contents": "itemType:isWritable() modalWindow:addButton(id, text)" },
            { "trigger":"modalWindow:addChoice(id, text)", "contents": "modalWindow:addChoice(id, text)" },
            { "trigger":"modalWindow:getButtonCount()", "contents": "modalWindow:getButtonCount()" },
            { "trigger":"modalWindow:getChoiceCount()", "contents": "modalWindow:getChoiceCount()" },
            { "trigger":"modalWindow:getDefaultEnterButton()", "contents": "modalWindow:getDefaultEnterButton()" },
            { "trigger":"modalWindow:getDefaultEscapeButton()", "contents": "modalWindow:getDefaultEscapeButton()" },
            { "trigger":"modalWindow:getId()", "contents": "modalWindow:getId()" },
            { "trigger":"modalWindow:getMessage()", "contents": "modalWindow:getMessage()" },
            { "trigger":"modalWindow:getTitle()", "contents": "modalWindow:getTitle()" },
            { "trigger":"modalWindow:hasPriority()", "contents": "modalWindow:hasPriority()" },
            { "trigger":"modalWindow:sendToPlayer(player)", "contents": "modalWindow:sendToPlayer(player)" },
            { "trigger":"modalWindow:setDefaultEnterButton(buttonId)", "contents": "modalWindow:setDefaultEnterButton(buttonId)" },
            { "trigger":"modalWindow:setDefaultEscapeButton(buttonId)", "contents": "modalWindow:setDefaultEscapeButton(buttonId)" },
            { "trigger":"modalWindow:setMessage(text)", "contents": "modalWindow:setMessage(text)" },
            { "trigger":"modalWindow:setPriority(priority)", "contents": "modalWindow:setPriority(priority)" },
            { "trigger":"modalWindow:setTitle(text)monster:addFriend(creature)", "contents": "modalWindow:setTitle(text)monster:addFriend(creature)" },
            { "trigger":"monster:addTarget(creature[, pushFront = false])", "contents": "monster:addTarget(creature[, pushFront = false])" },
            { "trigger":"monster:despawn()", "contents": "monster:despawn()" },
            { "trigger":"monster:getFriendCount()", "contents": "monster:getFriendCount()" },
            { "trigger":"monster:getFriendList()", "contents": "monster:getFriendList()" },
            { "trigger":"monster:getSpawnPosition()", "contents": "monster:getSpawnPosition()" },
            { "trigger":"monster:getTargetCount()", "contents": "monster:getTargetCount()" },
            { "trigger":"monster:getTargetList()", "contents": "monster:getTargetList()" },
            { "trigger":"monster:getType()", "contents": "monster:getType()" },
            { "trigger":"monster:isFriend(creature)", "contents": "monster:isFriend(creature)" },
            { "trigger":"monster:isIdle()", "contents": "monster:isIdle()" },
            { "trigger":"monster:isMonster()", "contents": "monster:isMonster()" },
            { "trigger":"monster:isOpponent(creature)", "contents": "monster:isOpponent(creature)" },
            { "trigger":"monster:isTarget(creature)", "contents": "monster:isTarget(creature)" },
            { "trigger":"monster:removeFriend(creature)", "contents": "monster:removeFriend(creature)" },
            { "trigger":"monster:removeTarget(creature)", "contents": "monster:removeTarget(creature)" },
            { "trigger":"monster:searchTarget([searchType = TARGETSEARCH_DEFAULT])", "contents": "monster:searchTarget([searchType = TARGETSEARCH_DEFAULT])" },
            { "trigger":"monster:selectTarget(creature)", "contents": "monster:selectTarget(creature)" },
            { "trigger":"monster:setIdle(idle)monsterType:canPushCreatures()", "contents": "monster:setIdle(idle)monsterType:canPushCreatures()" },
            { "trigger":"monsterType:canPushItems()", "contents": "monsterType:canPushItems()" },
            { "trigger":"monsterType:getArmor()", "contents": "monsterType:getArmor()" },
            { "trigger":"monsterType:getAttackList()", "contents": "monsterType:getAttackList()" },
            { "trigger":"monsterType:getBaseSpeed()", "contents": "monsterType:getBaseSpeed()" },
            { "trigger":"monsterType:getChangeTargetChance()", "contents": "monsterType:getChangeTargetChance()" },
            { "trigger":"monsterType:getChangeTargetSpeed()", "contents": "monsterType:getChangeTargetSpeed()" },
            { "trigger":"monsterType:getCombatImmunities()", "contents": "monsterType:getCombatImmunities()" },
            { "trigger":"monsterType:getConditionImmunities()", "contents": "monsterType:getConditionImmunities()" },
            { "trigger":"monsterType:getCorpseId()", "contents": "monsterType:getCorpseId()" },
            { "trigger":"monsterType:getCreatureEvents()", "contents": "monsterType:getCreatureEvents()" },
            { "trigger":"monsterType:getDefense()", "contents": "monsterType:getDefense()" },
            { "trigger":"monsterType:getDefenseList()", "contents": "monsterType:getDefenseList()" },
            { "trigger":"monsterType:getElementList()", "contents": "monsterType:getElementList()" },
            { "trigger":"monsterType:getExperience()", "contents": "monsterType:getExperience()" },
            { "trigger":"monsterType:getHealth()", "contents": "monsterType:getHealth()" },
            { "trigger":"monsterType:getLight()", "contents": "monsterType:getLight()" },
            { "trigger":"monsterType:getLoot()", "contents": "monsterType:getLoot()" },
            { "trigger":"monsterType:getManaCost()", "contents": "monsterType:getManaCost()" },
            { "trigger":"monsterType:getMaxHealth()", "contents": "monsterType:getMaxHealth()" },
            { "trigger":"monsterType:getMaxSummons()", "contents": "monsterType:getMaxSummons()" },
            { "trigger":"monsterType:getName()", "contents": "monsterType:getName()" },
            { "trigger":"monsterType:getNameDescription()", "contents": "monsterType:getNameDescription()" },
            { "trigger":"monsterType:getOutfit()", "contents": "monsterType:getOutfit()" },
            { "trigger":"monsterType:getRace()", "contents": "monsterType:getRace()" },
            { "trigger":"monsterType:getRunHealth()", "contents": "monsterType:getRunHealth()" },
            { "trigger":"monsterType:getStaticAttackChance()", "contents": "monsterType:getStaticAttackChance()" },
            { "trigger":"monsterType:getSummonList()", "contents": "monsterType:getSummonList()" },
            { "trigger":"monsterType:getTargetDistance()", "contents": "monsterType:getTargetDistance()" },
            { "trigger":"monsterType:getVoices()", "contents": "monsterType:getVoices()" },
            { "trigger":"monsterType:getYellChance()", "contents": "monsterType:getYellChance()" },
            { "trigger":"monsterType:getYellSpeedTicks()", "contents": "monsterType:getYellSpeedTicks()" },
            { "trigger":"monsterType:isAttackable()", "contents": "monsterType:isAttackable()" },
            { "trigger":"monsterType:isConvinceable()", "contents": "monsterType:isConvinceable()" },
            { "trigger":"monsterType:isHealthShown()", "contents": "monsterType:isHealthShown()" },
            { "trigger":"monsterType:isHostile()", "contents": "monsterType:isHostile()" },
            { "trigger":"monsterType:isIllusionable()", "contents": "monsterType:isIllusionable()" },
            { "trigger":"monsterType:isPushable()", "contents": "monsterType:isPushable()" },
            { "trigger":"monsterType:isSummonable()networkMessage:addByte(number)", "contents": "monsterType:isSummonable()networkMessage:addByte(number)" },
            { "trigger":"networkMessage:addDouble(number)", "contents": "networkMessage:addDouble(number)" },
            { "trigger":"networkMessage:addItem(item)", "contents": "networkMessage:addItem(item)" },
            { "trigger":"networkMessage:addItemId(itemId)", "contents": "networkMessage:addItemId(itemId)" },
            { "trigger":"networkMessage:addPosition(position)", "contents": "networkMessage:addPosition(position)" },
            { "trigger":"networkMessage:addString(string)", "contents": "networkMessage:addString(string)" },
            { "trigger":"networkMessage:addU16(number)", "contents": "networkMessage:addU16(number)" },
            { "trigger":"networkMessage:addU32(number)", "contents": "networkMessage:addU32(number)" },
            { "trigger":"networkMessage:addU64(number)", "contents": "networkMessage:addU64(number)" },
            { "trigger":"networkMessage:getByte()", "contents": "networkMessage:getByte()" },
            { "trigger":"networkMessage:getPosition()", "contents": "networkMessage:getPosition()" },
            { "trigger":"networkMessage:getString()", "contents": "networkMessage:getString()" },
            { "trigger":"networkMessage:getU16()", "contents": "networkMessage:getU16()" },
            { "trigger":"networkMessage:getU32()", "contents": "networkMessage:getU32()" },
            { "trigger":"networkMessage:getU64()", "contents": "networkMessage:getU64()" },
            { "trigger":"networkMessage:reset()", "contents": "networkMessage:reset()" },
            { "trigger":"networkMessage:sendToPlayer(player)", "contents": "networkMessage:sendToPlayer(player)" },
            { "trigger":"networkMessage:skipBytes(number)", "contents": "networkMessage:skipBytes(number)" },
            { "trigger":"npc:getSpeechBubble()", "contents": "npc:getSpeechBubble()" },
            { "trigger":"npc:isNpc()", "contents": "npc:isNpc()" },
            { "trigger":"npc:setMasterPos(pos[, radius])", "contents": "npc:setMasterPos(pos[, radius])" },
            { "trigger":"npc:setSpeechBubble(speechBubble)party:addInvite(player)", "contents": "npc:setSpeechBubble(speechBubble)party:addInvite(player)" },
            { "trigger":"party:addMember(player)", "contents": "party:addMember(player)" },
            { "trigger":"party:disband()", "contents": "party:disband()" },
            { "trigger":"party:getInviteeCount()", "contents": "party:getInviteeCount()" },
            { "trigger":"party:getInvitees()", "contents": "party:getInvitees()" },
            { "trigger":"party:getLeader()", "contents": "party:getLeader()" },
            { "trigger":"party:getMemberCount()", "contents": "party:getMemberCount()" },
            { "trigger":"party:getMembers()", "contents": "party:getMembers()" },
            { "trigger":"party:isSharedExperienceActive()", "contents": "party:isSharedExperienceActive()" },
            { "trigger":"party:isSharedExperienceEnabled()", "contents": "party:isSharedExperienceEnabled()" },
            { "trigger":"party:removeInvite(player)", "contents": "party:removeInvite(player)" },
            { "trigger":"party:removeMember(player)", "contents": "party:removeMember(player)" },
            { "trigger":"party:setLeader(player)", "contents": "party:setLeader(player)" },
            { "trigger":"party:setSharedExperience(active)", "contents": "party:setSharedExperience(active)" },
            { "trigger":"party:shareExperience(experience)player:addBlessing(blessing)", "contents": "party:shareExperience(experience)player:addBlessing(blessing)" },
            { "trigger":"player:addExperience(experience[, sendText = false])", "contents": "player:addExperience(experience[, sendText = false])" },
            { "trigger":"player:addItem(itemId[, count = 1[, canDropOnMap = true[, subType = 1[, slot = CONST_SLOT_WHEREEVER]]]])", "contents": "player:addItem(itemId[, count = 1[, canDropOnMap = true[, subType = 1[, slot = CONST_SLOT_WHEREEVER]]]])" },
            { "trigger":"player:addItemEx(item[, canDropOnMap = false[, slot = CONST_SLOT_WHEREEVER]])", "contents": "player:addItemEx(item[, canDropOnMap = false[, slot = CONST_SLOT_WHEREEVER]])" },
            { "trigger":"player:addManaSpent(amount)", "contents": "player:addManaSpent(amount)" },
            { "trigger":"player:addMapMark(position, type, description)", "contents": "player:addMapMark(position, type, description)" },
            { "trigger":"player:addMoney(money)", "contents": "player:addMoney(money)" },
            { "trigger":"player:addMount(mountId)", "contents": "player:addMount(mountId)" },
            { "trigger":"player:addOutfit(lookType)", "contents": "player:addOutfit(lookType)" },
            { "trigger":"player:addOutfitAddon(lookType, addon)", "contents": "player:addOutfitAddon(lookType, addon)" },
            { "trigger":"player:addPremiumDays(days)", "contents": "player:addPremiumDays(days)" },
            { "trigger":"player:addSkillTries(skillType, tries)", "contents": "player:addSkillTries(skillType, tries)" },
            { "trigger":"player:addSoul(soulChange)", "contents": "player:addSoul(soulChange)" },
            { "trigger":"player:canLearnSpell(spellName)", "contents": "player:canLearnSpell(spellName)" },
            { "trigger":"player:channelSay(speaker, type, text, channelId)", "contents": "player:channelSay(speaker, type, text, channelId)" },
            { "trigger":"player:forgetSpell(spellName)", "contents": "player:forgetSpell(spellName)" },
            { "trigger":"player:getAccountId()", "contents": "player:getAccountId()" },
            { "trigger":"player:getAccountType()", "contents": "player:getAccountType()" },
            { "trigger":"player:getBankBalance()", "contents": "player:getBankBalance()" },
            { "trigger":"player:getBaseMagicLevel()", "contents": "player:getBaseMagicLevel()" },
            { "trigger":"player:getCapacity()", "contents": "player:getCapacity()" },
            { "trigger":"player:getClient()", "contents": "player:getClient()" },
            { "trigger":"player:getContainerById(id)", "contents": "player:getContainerById(id)" },
            { "trigger":"player:getContainerId(container)", "contents": "player:getContainerId(container)" },
            { "trigger":"player:getContainerIndex(id)", "contents": "player:getContainerIndex(id)" },
            { "trigger":"player:getDeathPenalty()", "contents": "player:getDeathPenalty()" },
            { "trigger":"player:getDepotChest(depotId[, autoCreate = false])", "contents": "player:getDepotChest(depotId[, autoCreate = false])" },
            { "trigger":"player:getEffectiveSkillLevel(skillType)", "contents": "player:getEffectiveSkillLevel(skillType)" },
            { "trigger":"player:getExperience()", "contents": "player:getExperience()" },
            { "trigger":"player:getFreeCapacity()", "contents": "player:getFreeCapacity()" },
            { "trigger":"player:getGroup()", "contents": "player:getGroup()" },
            { "trigger":"player:getGuid()", "contents": "player:getGuid()" },
            { "trigger":"player:getGuild()", "contents": "player:getGuild()" },
            { "trigger":"player:getGuildLevel()", "contents": "player:getGuildLevel()" },
            { "trigger":"player:getGuildNick()", "contents": "player:getGuildNick()" },
            { "trigger":"player:getHouse()", "contents": "player:getHouse()" },
            { "trigger":"player:getInbox()", "contents": "player:getInbox()" },
            { "trigger":"player:getIp()", "contents": "player:getIp()" },
            { "trigger":"player:getItemById(itemId, deepSearch[, subType = -1])", "contents": "player:getItemById(itemId, deepSearch[, subType = -1])" },
            { "trigger":"player:getItemCount(itemId[, subType = -1])", "contents": "player:getItemCount(itemId[, subType = -1])" },
            { "trigger":"player:getLastLoginSaved()", "contents": "player:getLastLoginSaved()" },
            { "trigger":"player:getLevel()", "contents": "player:getLevel()" },
            { "trigger":"player:getMagicLevel()", "contents": "player:getMagicLevel()" },
            { "trigger":"player:getManaSpent()", "contents": "player:getManaSpent()" },
            { "trigger":"player:getMaxSoul()", "contents": "player:getMaxSoul()" },
            { "trigger":"player:getMoney()", "contents": "player:getMoney()" },
            { "trigger":"player:getParty()", "contents": "player:getParty()" },
            { "trigger":"player:getPremiumDays()", "contents": "player:getPremiumDays()" },
            { "trigger":"player:getSex()", "contents": "player:getSex()" },
            { "trigger":"player:getSkillLevel(skillType)", "contents": "player:getSkillLevel(skillType)" },
            { "trigger":"player:getSkillPercent(skillType)", "contents": "player:getSkillPercent(skillType)" },
            { "trigger":"player:getSkillTries(skillType)", "contents": "player:getSkillTries(skillType)" },
            { "trigger":"player:getSkull()", "contents": "player:getSkull()" },
            { "trigger":"player:getSkullTime()", "contents": "player:getSkullTime()" },
            { "trigger":"player:getSlotItem(slot)", "contents": "player:getSlotItem(slot)" },
            { "trigger":"player:getSoul()", "contents": "player:getSoul()" },
            { "trigger":"player:getStamina()", "contents": "player:getStamina()" },
            { "trigger":"player:getStorageValue(key)", "contents": "player:getStorageValue(key)" },
            { "trigger":"player:getTown()", "contents": "player:getTown()" },
            { "trigger":"player:getVocation()", "contents": "player:getVocation()" },
            { "trigger":"player:hasBlessing(blessing)", "contents": "player:hasBlessing(blessing)" },
            { "trigger":"player:hasLearnedSpell(spellName)", "contents": "player:hasLearnedSpell(spellName)" },
            { "trigger":"player:hasMount(mountId)", "contents": "player:hasMount(mountId)" },
            { "trigger":"player:hasOutfit(lookType[, addon = 0])", "contents": "player:hasOutfit(lookType[, addon = 0])" },
            { "trigger":"player:isPlayer()", "contents": "player:isPlayer()" },
            { "trigger":"player:isPzLocked()", "contents": "player:isPzLocked()" },
            { "trigger":"player:learnSpell(spellName)", "contents": "player:learnSpell(spellName)" },
            { "trigger":"player:eek:penChannel(channelId)", "contents": "player:eek:penChannel(channelId)" },
            { "trigger":"player:popupFYI(message)", "contents": "player:popupFYI(message)" },
            { "trigger":"player:removeBlessing(blessing)", "contents": "player:removeBlessing(blessing)" },
            { "trigger":"player:removeExperience(experience[, sendText = false])", "contents": "player:removeExperience(experience[, sendText = false])" },
            { "trigger":"player:removeItem(itemId, count[, subType = -1[, ignoreEquipped = false]])", "contents": "player:removeItem(itemId, count[, subType = -1[, ignoreEquipped = false]])" },
            { "trigger":"player:removeMoney(money)", "contents": "player:removeMoney(money)" },
            { "trigger":"player:removeMount(mountId)", "contents": "player:removeMount(mountId)" },
            { "trigger":"player:removeOutfit(lookType)", "contents": "player:removeOutfit(lookType)" },
            { "trigger":"player:removeOutfitAddon(lookType, addon)", "contents": "player:removeOutfitAddon(lookType, addon)" },
            { "trigger":"player:removePremiumDays(days)", "contents": "player:removePremiumDays(days)" },
            { "trigger":"player:save()", "contents": "player:save()" },
            { "trigger":"player:sendChannelMessage(author, text, type, channelId)", "contents": "player:sendChannelMessage(author, text, type, channelId)" },
            { "trigger":"player:sendOutfitWindow()", "contents": "player:sendOutfitWindow()" },
            { "trigger":"player:sendPrivateMessage(speaker, text[, type])", "contents": "player:sendPrivateMessage(speaker, text[, type])" },
            { "trigger":"player:sendTextMessage(type, text[, position, primaryValue = 0, primaryColor = TEXTCOLOR_NONE[, secondaryValue = 0, secondaryColor = TEXTCOLOR_NONE]])", "contents": "player:sendTextMessage(type, text[, position, primaryValue = 0, primaryColor = TEXTCOLOR_NONE[, secondaryValue = 0, secondaryColor = TEXTCOLOR_NONE]])" },
            { "trigger":"player:sendTutorial(tutorialId)", "contents": "player:sendTutorial(tutorialId)" },
            { "trigger":"player:setAccountType(accountType)", "contents": "player:setAccountType(accountType)" },
            { "trigger":"player:setBankBalance(bankBalance)", "contents": "player:setBankBalance(bankBalance)" },
            { "trigger":"player:setCapacity(capacity)", "contents": "player:setCapacity(capacity)" },
            { "trigger":"player:setGhostMode(enabled)", "contents": "player:setGhostMode(enabled)" },
            { "trigger":"player:setGroup(group)", "contents": "player:setGroup(group)" },
            { "trigger":"player:setGuild(guild)", "contents": "player:setGuild(guild)" },
            { "trigger":"player:setGuildLevel(level)", "contents": "player:setGuildLevel(level)" },
            { "trigger":"player:setGuildNick(nick)", "contents": "player:setGuildNick(nick)" },
            { "trigger":"player:setMaxMana(maxMana)", "contents": "player:setMaxMana(maxMana)" },
            { "trigger":"player:setSex(newSex)", "contents": "player:setSex(newSex)" },
            { "trigger":"player:setSkull(skull)", "contents": "player:setSkull(skull)" },
            { "trigger":"player:setSkullTime(skullTime)", "contents": "player:setSkullTime(skullTime)" },
            { "trigger":"player:setStamina(stamina)", "contents": "player:setStamina(stamina)" },
            { "trigger":"player:setStorageValue(key, value)", "contents": "player:setStorageValue(key, value)" },
            { "trigger":"player:setTown(town)", "contents": "player:setTown(town)" },
            { "trigger":"player:setVocation(vocation)", "contents": "player:setVocation(vocation)" },
            { "trigger":"player:showTextDialog(itemId[, text[, canWrite[, length]]])position:getDistance(positionEx)", "contents": "player:showTextDialog(itemId[, text[, canWrite[, length]]])position:getDistance(positionEx)" },
            { "trigger":"position:isSightClear(positionEx[, sameFloor = true])", "contents": "position:isSightClear(positionEx[, sameFloor = true])" },
            { "trigger":"position:sendDistanceEffect(positionEx, distanceEffect[, player = nullptr])", "contents": "position:sendDistanceEffect(positionEx, distanceEffect[, player = nullptr])" },
            { "trigger":"position:sendMagicEffect(magicEffect[, player = nullptr])", "contents": "position:sendMagicEffect(magicEffect[, player = nullptr])" },
            { "trigger":"setmetatable(className, methodsTable)table.create(arrayLength, keyLength)", "contents": "setmetatable(className, methodsTable)table.create(arrayLength, keyLength)" },
            { "trigger":"tableName.name = valueteleport:getDestination()", "contents": "tableName.name = valueteleport:getDestination()" },
            { "trigger":"teleport:isTeleport()", "contents": "teleport:isTeleport()" },
            { "trigger":"teleport:setDestination(position)tile:getBottomCreature()", "contents": "teleport:setDestination(position)tile:getBottomCreature()" },
            { "trigger":"tile:getBottomVisibleCreature(creature)", "contents": "tile:getBottomVisibleCreature(creature)" },
            { "trigger":"tile:getCreatureCount()", "contents": "tile:getCreatureCount()" },
            { "trigger":"tile:getCreatures()", "contents": "tile:getCreatures()" },
            { "trigger":"tile:getDownItemCount()", "contents": "tile:getDownItemCount()" },
            { "trigger":"tile:getFieldItem()", "contents": "tile:getFieldItem()" },
            { "trigger":"tile:getGround()", "contents": "tile:getGround()" },
            { "trigger":"tile:getHouse()", "contents": "tile:getHouse()" },
            { "trigger":"tile:getItemById(itemId[, subType = -1])", "contents": "tile:getItemById(itemId[, subType = -1])" },
            { "trigger":"tile:getItemByTopOrder(topOrder)", "contents": "tile:getItemByTopOrder(topOrder)" },
            { "trigger":"tile:getItemByType(itemType)", "contents": "tile:getItemByType(itemType)" },
            { "trigger":"tile:getItemCount()", "contents": "tile:getItemCount()" },
            { "trigger":"tile:getItemCountById(itemId[, subType = -1])", "contents": "tile:getItemCountById(itemId[, subType = -1])" },
            { "trigger":"tile:getItems()", "contents": "tile:getItems()" },
            { "trigger":"tile:getPosition()", "contents": "tile:getPosition()" },
            { "trigger":"tile:getThing(index)", "contents": "tile:getThing(index)" },
            { "trigger":"tile:getThingCount()", "contents": "tile:getThingCount()" },
            { "trigger":"tile:getThingIndex(thing)", "contents": "tile:getThingIndex(thing)" },
            { "trigger":"tile:getTopCreature()", "contents": "tile:getTopCreature()" },
            { "trigger":"tile:getTopDownItem()", "contents": "tile:getTopDownItem()" },
            { "trigger":"tile:getTopItemCount()", "contents": "tile:getTopItemCount()" },
            { "trigger":"tile:getTopTopItem()", "contents": "tile:getTopTopItem()" },
            { "trigger":"tile:getTopVisibleCreature(creature)", "contents": "tile:getTopVisibleCreature(creature)" },
            { "trigger":"tile:getTopVisibleThing(creature)", "contents": "tile:getTopVisibleThing(creature)" },
            { "trigger":"tile:hasFlag(flag)", "contents": "tile:hasFlag(flag)" },
            { "trigger":"tile:hasProperty(property[, item])", "contents": "tile:hasProperty(property[, item])" },
            { "trigger":"tile:queryAdd(thing[, flags])town:getId()", "contents": "tile:queryAdd(thing[, flags])town:getId()" },
            { "trigger":"town:getName()", "contents": "town:getName()" },
            { "trigger":"town:getTemplePosition()Variant:getNumber()", "contents": "town:getTemplePosition()Variant:getNumber()" },
            { "trigger":"Variant:getPosition()", "contents": "Variant:getPosition()" },
            { "trigger":"Variant:getString()vocation:getAttackSpeed()", "contents": "Variant:getString()vocation:getAttackSpeed()" },
            { "trigger":"vocation:getBaseSpeed()", "contents": "vocation:getBaseSpeed()" },
            { "trigger":"vocation:getCapacityGain()", "contents": "vocation:getCapacityGain()" },
            { "trigger":"vocation:getClientId()", "contents": "vocation:getClientId()" },
            { "trigger":"vocation:getDemotion()", "contents": "vocation:getDemotion()" },
            { "trigger":"vocation:getDescription()", "contents": "vocation:getDescription()" },
            { "trigger":"vocation:getHealthGain()", "contents": "vocation:getHealthGain()" },
            { "trigger":"vocation:getHealthGainAmount()", "contents": "vocation:getHealthGainAmount()" },
            { "trigger":"vocation:getHealthGainTicks()", "contents": "vocation:getHealthGainTicks()" },
            { "trigger":"vocation:getId()", "contents": "vocation:getId()" },
            { "trigger":"vocation:getManaGain()", "contents": "vocation:getManaGain()" },
            { "trigger":"vocation:getManaGainAmount()", "contents": "vocation:getManaGainAmount()" },
            { "trigger":"vocation:getManaGainTicks()", "contents": "vocation:getManaGainTicks()" },
            { "trigger":"vocation:getMaxSoul()", "contents": "vocation:getMaxSoul()" },
            { "trigger":"vocation:getName()", "contents": "vocation:getName()" },
            { "trigger":"vocation:getPromotion()", "contents": "vocation:getPromotion()" },
            { "trigger":"vocation:getRequiredManaSpent(magicLevel)", "contents": "vocation:getRequiredManaSpent(magicLevel)" },
            { "trigger":"vocation:getRequiredSkillTries(skillType, skillLevel)", "contents": "vocation:getRequiredSkillTries(skillType, skillLevel)" },
            { "trigger":"vocation:getSoulGainTicks() ", "contents": "vocation:getSoulGainTicks() " },
            { "trigger":"ACCOUNT_TYPE_NORMAL", "contents": "ACCOUNT_TYPE_NORMAL" },
            { "trigger":"ACCOUNT_TYPE_TUTOR", "contents": "ACCOUNT_TYPE_TUTOR" },
            { "trigger":"ACCOUNT_TYPE_SENIORTUTOR", "contents": "ACCOUNT_TYPE_SENIORTUTOR" },
            { "trigger":"ACCOUNT_TYPE_GAMEMASTER", "contents": "ACCOUNT_TYPE_GAMEMASTER" },
            { "trigger":"ACCOUNT_TYPE_GOD", "contents": "ACCOUNT_TYPE_GOD" },
            { "trigger":"CALLBACK_PARAM_LEVELMAGICVALUE", "contents": "CALLBACK_PARAM_LEVELMAGICVALUE" },
            { "trigger":"CALLBACK_PARAM_SKILLVALUE", "contents": "CALLBACK_PARAM_SKILLVALUE" },
            { "trigger":"CALLBACK_PARAM_TARGETTILE", "contents": "CALLBACK_PARAM_TARGETTILE" },
            { "trigger":"CALLBACK_PARAM_TARGETCREATURE", "contents": "CALLBACK_PARAM_TARGETCREATURE" },
            { "trigger":"COMBAT_FORMULA_UNDEFINED", "contents": "COMBAT_FORMULA_UNDEFINED" },
            { "trigger":"COMBAT_FORMULA_LEVELMAGIC", "contents": "COMBAT_FORMULA_LEVELMAGIC" },
            { "trigger":"COMBAT_FORMULA_SKILL", "contents": "COMBAT_FORMULA_SKILL" },
            { "trigger":"COMBAT_FORMULA_DAMAGE", "contents": "COMBAT_FORMULA_DAMAGE" },
            { "trigger":"NORTH", "contents": "NORTH" },
            { "trigger":"EAST", "contents": "EAST" },
            { "trigger":"SOUTH", "contents": "SOUTH" },
            { "trigger":"WEST", "contents": "WEST" },
            { "trigger":"SOUTHWEST", "contents": "SOUTHWEST" },
            { "trigger":"SOUTHEAST", "contents": "SOUTHEAST" },
            { "trigger":"NORTHWEST", "contents": "NORTHWEST" },
            { "trigger":"NORTHEAST", "contents": "NORTHEAST" },
            { "trigger":"COMBAT_NONE", "contents": "COMBAT_NONE" },
            { "trigger":"COMBAT_PHYSICALDAMAGE", "contents": "COMBAT_PHYSICALDAMAGE" },
            { "trigger":"COMBAT_ENERGYDAMAGE", "contents": "COMBAT_ENERGYDAMAGE" },
            { "trigger":"COMBAT_EARTHDAMAGE", "contents": "COMBAT_EARTHDAMAGE" },
            { "trigger":"COMBAT_FIREDAMAGE", "contents": "COMBAT_FIREDAMAGE" },
            { "trigger":"COMBAT_UNDEFINEDDAMAGE", "contents": "COMBAT_UNDEFINEDDAMAGE" },
            { "trigger":"COMBAT_LIFEDRAIN", "contents": "COMBAT_LIFEDRAIN" },
            { "trigger":"COMBAT_MANADRAIN", "contents": "COMBAT_MANADRAIN" },
            { "trigger":"COMBAT_HEALING", "contents": "COMBAT_HEALING" },
            { "trigger":"COMBAT_DROWNDAMAGE", "contents": "COMBAT_DROWNDAMAGE" },
            { "trigger":"COMBAT_ICEDAMAGE", "contents": "COMBAT_ICEDAMAGE" },
            { "trigger":"COMBAT_HOLYDAMAGE", "contents": "COMBAT_HOLYDAMAGE" },
            { "trigger":"COMBAT_DEATHDAMAGE", "contents": "COMBAT_DEATHDAMAGE" },
            { "trigger":"COMBAT_PARAM_TYPE", "contents": "COMBAT_PARAM_TYPE" },
            { "trigger":"COMBAT_PARAM_EFFECT", "contents": "COMBAT_PARAM_EFFECT" },
            { "trigger":"COMBAT_PARAM_DISTANCEEFFECT", "contents": "COMBAT_PARAM_DISTANCEEFFECT" },
            { "trigger":"COMBAT_PARAM_BLOCKSHIELD", "contents": "COMBAT_PARAM_BLOCKSHIELD" },
            { "trigger":"COMBAT_PARAM_BLOCKARMOR", "contents": "COMBAT_PARAM_BLOCKARMOR" },
            { "trigger":"COMBAT_PARAM_TARGETCASTERORTOPMOST", "contents": "COMBAT_PARAM_TARGETCASTERORTOPMOST" },
            { "trigger":"COMBAT_PARAM_CREATEITEM", "contents": "COMBAT_PARAM_CREATEITEM" },
            { "trigger":"COMBAT_PARAM_AGGRESSIVE", "contents": "COMBAT_PARAM_AGGRESSIVE" },
            { "trigger":"COMBAT_PARAM_DISPEL", "contents": "COMBAT_PARAM_DISPEL" },
            { "trigger":"COMBAT_PARAM_USECHARGES", "contents": "COMBAT_PARAM_USECHARGES" },
            { "trigger":"CONDITION_NONE", "contents": "CONDITION_NONE" },
            { "trigger":"CONDITION_POISON", "contents": "CONDITION_POISON" },
            { "trigger":"CONDITION_FIRE", "contents": "CONDITION_FIRE" },
            { "trigger":"CONDITION_ENERGY", "contents": "CONDITION_ENERGY" },
            { "trigger":"CONDITION_BLEEDING", "contents": "CONDITION_BLEEDING" },
            { "trigger":"CONDITION_HASTE", "contents": "CONDITION_HASTE" },
            { "trigger":"CONDITION_PARALYZE", "contents": "CONDITION_PARALYZE" },
            { "trigger":"CONDITION_OUTFIT", "contents": "CONDITION_OUTFIT" },
            { "trigger":"CONDITION_INVISIBLE", "contents": "CONDITION_INVISIBLE" },
            { "trigger":"CONDITION_LIGHT", "contents": "CONDITION_LIGHT" },
            { "trigger":"CONDITION_MANASHIELD", "contents": "CONDITION_MANASHIELD" },
            { "trigger":"CONDITION_INFIGHT", "contents": "CONDITION_INFIGHT" },
            { "trigger":"CONDITION_DRUNK", "contents": "CONDITION_DRUNK" },
            { "trigger":"CONDITION_EXHAUST_WEAPON", "contents": "CONDITION_EXHAUST_WEAPON" },
            { "trigger":"CONDITION_REGENERATION", "contents": "CONDITION_REGENERATION" },
            { "trigger":"CONDITION_SOUL", "contents": "CONDITION_SOUL" },
            { "trigger":"CONDITION_DROWN", "contents": "CONDITION_DROWN" },
            { "trigger":"CONDITION_MUTED", "contents": "CONDITION_MUTED" },
            { "trigger":"CONDITION_CHANNELMUTEDTICKS", "contents": "CONDITION_CHANNELMUTEDTICKS" },
            { "trigger":"CONDITION_YELLTICKS", "contents": "CONDITION_YELLTICKS" },
            { "trigger":"CONDITION_ATTRIBUTES", "contents": "CONDITION_ATTRIBUTES" },
            { "trigger":"CONDITION_FREEZING", "contents": "CONDITION_FREEZING" },
            { "trigger":"CONDITION_DAZZLED", "contents": "CONDITION_DAZZLED" },
            { "trigger":"CONDITION_CURSED", "contents": "CONDITION_CURSED" },
            { "trigger":"CONDITION_EXHAUST_COMBAT", "contents": "CONDITION_EXHAUST_COMBAT" },
            { "trigger":"CONDITION_EXHAUST_HEAL", "contents": "CONDITION_EXHAUST_HEAL" },
            { "trigger":"CONDITION_PACIFIED", "contents": "CONDITION_PACIFIED" },
            { "trigger":"CONDITION_SPELLCOOLDOWN", "contents": "CONDITION_SPELLCOOLDOWN" },
            { "trigger":"CONDITION_SPELLGROUPCOOLDOWN", "contents": "CONDITION_SPELLGROUPCOOLDOWN" },
            { "trigger":"CONDITIONID_DEFAULT", "contents": "CONDITIONID_DEFAULT" },
            { "trigger":"CONDITIONID_COMBAT", "contents": "CONDITIONID_COMBAT" },
            { "trigger":"CONDITIONID_HEAD", "contents": "CONDITIONID_HEAD" },
            { "trigger":"CONDITIONID_NECKLACE", "contents": "CONDITIONID_NECKLACE" },
            { "trigger":"CONDITIONID_BACKPACK", "contents": "CONDITIONID_BACKPACK" },
            { "trigger":"CONDITIONID_ARMOR", "contents": "CONDITIONID_ARMOR" },
            { "trigger":"CONDITIONID_RIGHT", "contents": "CONDITIONID_RIGHT" },
            { "trigger":"CONDITIONID_LEFT", "contents": "CONDITIONID_LEFT" },
            { "trigger":"CONDITIONID_LEGS", "contents": "CONDITIONID_LEGS" },
            { "trigger":"CONDITIONID_FEET", "contents": "CONDITIONID_FEET" },
            { "trigger":"CONDITIONID_RING", "contents": "CONDITIONID_RING" },
            { "trigger":"CONDITIONID_AMMO", "contents": "CONDITIONID_AMMO" },
            { "trigger":"CONDITION_PARAM_OWNER", "contents": "CONDITION_PARAM_OWNER" },
            { "trigger":"CONDITION_PARAM_TICKS", "contents": "CONDITION_PARAM_TICKS" },
            { "trigger":"CONDITION_PARAM_HEALTHGAIN", "contents": "CONDITION_PARAM_HEALTHGAIN" },
            { "trigger":"CONDITION_PARAM_HEALTHTICKS", "contents": "CONDITION_PARAM_HEALTHTICKS" },
            { "trigger":"CONDITION_PARAM_MANAGAIN", "contents": "CONDITION_PARAM_MANAGAIN" },
            { "trigger":"CONDITION_PARAM_MANATICKS", "contents": "CONDITION_PARAM_MANATICKS" },
            { "trigger":"CONDITION_PARAM_DELAYED", "contents": "CONDITION_PARAM_DELAYED" },
            { "trigger":"CONDITION_PARAM_SPEED", "contents": "CONDITION_PARAM_SPEED" },
            { "trigger":"CONDITION_PARAM_LIGHT_LEVEL", "contents": "CONDITION_PARAM_LIGHT_LEVEL" },
            { "trigger":"CONDITION_PARAM_LIGHT_COLOR", "contents": "CONDITION_PARAM_LIGHT_COLOR" },
            { "trigger":"CONDITION_PARAM_SOULGAIN", "contents": "CONDITION_PARAM_SOULGAIN" },
            { "trigger":"CONDITION_PARAM_SOULTICKS", "contents": "CONDITION_PARAM_SOULTICKS" },
            { "trigger":"CONDITION_PARAM_MINVALUE", "contents": "CONDITION_PARAM_MINVALUE" },
            { "trigger":"CONDITION_PARAM_MAXVALUE", "contents": "CONDITION_PARAM_MAXVALUE" },
            { "trigger":"CONDITION_PARAM_STARTVALUE", "contents": "CONDITION_PARAM_STARTVALUE" },
            { "trigger":"CONDITION_PARAM_TICKINTERVAL", "contents": "CONDITION_PARAM_TICKINTERVAL" },
            { "trigger":"CONDITION_PARAM_FORCEUPDATE", "contents": "CONDITION_PARAM_FORCEUPDATE" },
            { "trigger":"CONDITION_PARAM_SKILL_MELEE", "contents": "CONDITION_PARAM_SKILL_MELEE" },
            { "trigger":"CONDITION_PARAM_SKILL_FIST", "contents": "CONDITION_PARAM_SKILL_FIST" },
            { "trigger":"CONDITION_PARAM_SKILL_CLUB", "contents": "CONDITION_PARAM_SKILL_CLUB" },
            { "trigger":"CONDITION_PARAM_SKILL_SWORD", "contents": "CONDITION_PARAM_SKILL_SWORD" },
            { "trigger":"CONDITION_PARAM_SKILL_AXE", "contents": "CONDITION_PARAM_SKILL_AXE" },
            { "trigger":"CONDITION_PARAM_SKILL_DISTANCE", "contents": "CONDITION_PARAM_SKILL_DISTANCE" },
            { "trigger":"CONDITION_PARAM_SKILL_SHIELD", "contents": "CONDITION_PARAM_SKILL_SHIELD" },
            { "trigger":"CONDITION_PARAM_SKILL_FISHING", "contents": "CONDITION_PARAM_SKILL_FISHING" },
            { "trigger":"CONDITION_PARAM_STAT_MAXHITPOINTS", "contents": "CONDITION_PARAM_STAT_MAXHITPOINTS" },
            { "trigger":"CONDITION_PARAM_STAT_MAXMANAPOINTS", "contents": "CONDITION_PARAM_STAT_MAXMANAPOINTS" },
            { "trigger":"CONDITION_PARAM_STAT_SOULPOINTS", "contents": "CONDITION_PARAM_STAT_SOULPOINTS" },
            { "trigger":"CONDITION_PARAM_STAT_MAGICPOINTS", "contents": "CONDITION_PARAM_STAT_MAGICPOINTS" },
            { "trigger":"CONDITION_PARAM_STAT_MAXHITPOINTSPERCENT", "contents": "CONDITION_PARAM_STAT_MAXHITPOINTSPERCENT" },
            { "trigger":"CONDITION_PARAM_STAT_MAXMANAPOINTSPERCENT", "contents": "CONDITION_PARAM_STAT_MAXMANAPOINTSPERCENT" },
            { "trigger":"CONDITION_PARAM_STAT_SOULPOINTSPERCENT", "contents": "CONDITION_PARAM_STAT_SOULPOINTSPERCENT" },
            { "trigger":"CONDITION_PARAM_STAT_MAGICPOINTSPERCENT", "contents": "CONDITION_PARAM_STAT_MAGICPOINTSPERCENT" },
            { "trigger":"CONDITION_PARAM_PERIODICDAMAGE", "contents": "CONDITION_PARAM_PERIODICDAMAGE" },
            { "trigger":"CONDITION_PARAM_SKILL_MELEEPERCENT", "contents": "CONDITION_PARAM_SKILL_MELEEPERCENT" },
            { "trigger":"CONDITION_PARAM_SKILL_FISTPERCENT", "contents": "CONDITION_PARAM_SKILL_FISTPERCENT" },
            { "trigger":"CONDITION_PARAM_SKILL_CLUBPERCENT", "contents": "CONDITION_PARAM_SKILL_CLUBPERCENT" },
            { "trigger":"CONDITION_PARAM_SKILL_SWORDPERCENT", "contents": "CONDITION_PARAM_SKILL_SWORDPERCENT" },
            { "trigger":"CONDITION_PARAM_SKILL_AXEPERCENT", "contents": "CONDITION_PARAM_SKILL_AXEPERCENT" },
            { "trigger":"CONDITION_PARAM_SKILL_DISTANCEPERCENT", "contents": "CONDITION_PARAM_SKILL_DISTANCEPERCENT" },
            { "trigger":"CONDITION_PARAM_SKILL_SHIELDPERCENT", "contents": "CONDITION_PARAM_SKILL_SHIELDPERCENT" },
            { "trigger":"CONDITION_PARAM_SKILL_FISHINGPERCENT", "contents": "CONDITION_PARAM_SKILL_FISHINGPERCENT" },
            { "trigger":"CONDITION_PARAM_BUFF_SPELL", "contents": "CONDITION_PARAM_BUFF_SPELL" },
            { "trigger":"CONDITION_PARAM_SUBID", "contents": "CONDITION_PARAM_SUBID" },
            { "trigger":"CONDITION_PARAM_FIELD", "contents": "CONDITION_PARAM_FIELD" },
            { "trigger":"CONST_ME_DRAWBLOOD", "contents": "CONST_ME_DRAWBLOOD" },
            { "trigger":"CONST_ME_LOSEENERGY", "contents": "CONST_ME_LOSEENERGY" },
            { "trigger":"CONST_ME_POFF", "contents": "CONST_ME_POFF" },
            { "trigger":"CONST_ME_BLOCKHIT", "contents": "CONST_ME_BLOCKHIT" },
            { "trigger":"CONST_ME_EXPLOSIONAREA", "contents": "CONST_ME_EXPLOSIONAREA" },
            { "trigger":"CONST_ME_EXPLOSIONHIT", "contents": "CONST_ME_EXPLOSIONHIT" },
            { "trigger":"CONST_ME_FIREAREA", "contents": "CONST_ME_FIREAREA" },
            { "trigger":"CONST_ME_YELLOW_RINGS", "contents": "CONST_ME_YELLOW_RINGS" },
            { "trigger":"CONST_ME_GREEN_RINGS", "contents": "CONST_ME_GREEN_RINGS" },
            { "trigger":"CONST_ME_HITAREA", "contents": "CONST_ME_HITAREA" },
            { "trigger":"CONST_ME_TELEPORT", "contents": "CONST_ME_TELEPORT" },
            { "trigger":"CONST_ME_ENERGYHIT", "contents": "CONST_ME_ENERGYHIT" },
            { "trigger":"CONST_ME_MAGIC_BLUE", "contents": "CONST_ME_MAGIC_BLUE" },
            { "trigger":"CONST_ME_MAGIC_RED", "contents": "CONST_ME_MAGIC_RED" },
            { "trigger":"CONST_ME_MAGIC_GREEN", "contents": "CONST_ME_MAGIC_GREEN" },
            { "trigger":"CONST_ME_HITBYFIRE", "contents": "CONST_ME_HITBYFIRE" },
            { "trigger":"CONST_ME_HITBYPOISON", "contents": "CONST_ME_HITBYPOISON" },
            { "trigger":"CONST_ME_MORTAREA", "contents": "CONST_ME_MORTAREA" },
            { "trigger":"CONST_ME_SOUND_GREEN", "contents": "CONST_ME_SOUND_GREEN" },
            { "trigger":"CONST_ME_SOUND_RED", "contents": "CONST_ME_SOUND_RED" },
            { "trigger":"CONST_ME_POISONAREA", "contents": "CONST_ME_POISONAREA" },
            { "trigger":"CONST_ME_SOUND_YELLOW", "contents": "CONST_ME_SOUND_YELLOW" },
            { "trigger":"CONST_ME_SOUND_PURPLE", "contents": "CONST_ME_SOUND_PURPLE" },
            { "trigger":"CONST_ME_SOUND_BLUE", "contents": "CONST_ME_SOUND_BLUE" },
            { "trigger":"CONST_ME_SOUND_WHITE", "contents": "CONST_ME_SOUND_WHITE" },
            { "trigger":"CONST_ME_BUBBLES", "contents": "CONST_ME_BUBBLES" },
            { "trigger":"CONST_ME_CRAPS", "contents": "CONST_ME_CRAPS" },
            { "trigger":"CONST_ME_GIFT_WRAPS", "contents": "CONST_ME_GIFT_WRAPS" },
            { "trigger":"CONST_ME_FIREWORK_YELLOW", "contents": "CONST_ME_FIREWORK_YELLOW" },
            { "trigger":"CONST_ME_FIREWORK_RED", "contents": "CONST_ME_FIREWORK_RED" },
            { "trigger":"CONST_ME_FIREWORK_BLUE", "contents": "CONST_ME_FIREWORK_BLUE" },
            { "trigger":"CONST_ME_STUN", "contents": "CONST_ME_STUN" },
            { "trigger":"CONST_ME_SLEEP", "contents": "CONST_ME_SLEEP" },
            { "trigger":"CONST_ME_WATERCREATURE", "contents": "CONST_ME_WATERCREATURE" },
            { "trigger":"CONST_ME_GROUNDSHAKER", "contents": "CONST_ME_GROUNDSHAKER" },
            { "trigger":"CONST_ME_HEARTS", "contents": "CONST_ME_HEARTS" },
            { "trigger":"CONST_ME_FIREATTACK", "contents": "CONST_ME_FIREATTACK" },
            { "trigger":"CONST_ME_ENERGYAREA", "contents": "CONST_ME_ENERGYAREA" },
            { "trigger":"CONST_ME_SMALLCLOUDS", "contents": "CONST_ME_SMALLCLOUDS" },
            { "trigger":"CONST_ME_HOLYDAMAGE", "contents": "CONST_ME_HOLYDAMAGE" },
            { "trigger":"CONST_ME_BIGCLOUDS", "contents": "CONST_ME_BIGCLOUDS" },
            { "trigger":"CONST_ME_ICEAREA", "contents": "CONST_ME_ICEAREA" },
            { "trigger":"CONST_ME_ICETORNADO", "contents": "CONST_ME_ICETORNADO" },
            { "trigger":"CONST_ME_ICEATTACK", "contents": "CONST_ME_ICEATTACK" },
            { "trigger":"CONST_ME_STONES", "contents": "CONST_ME_STONES" },
            { "trigger":"CONST_ME_SMALLPLANTS", "contents": "CONST_ME_SMALLPLANTS" },
            { "trigger":"CONST_ME_CARNIPHILA", "contents": "CONST_ME_CARNIPHILA" },
            { "trigger":"CONST_ME_PURPLEENERGY", "contents": "CONST_ME_PURPLEENERGY" },
            { "trigger":"CONST_ME_YELLOWENERGY", "contents": "CONST_ME_YELLOWENERGY" },
            { "trigger":"CONST_ME_HOLYAREA", "contents": "CONST_ME_HOLYAREA" },
            { "trigger":"CONST_ME_BIGPLANTS", "contents": "CONST_ME_BIGPLANTS" },
            { "trigger":"CONST_ME_CAKE", "contents": "CONST_ME_CAKE" },
            { "trigger":"CONST_ME_GIANTICE", "contents": "CONST_ME_GIANTICE" },
            { "trigger":"CONST_ME_WATERSPLASH", "contents": "CONST_ME_WATERSPLASH" },
            { "trigger":"CONST_ME_PLANTATTACK", "contents": "CONST_ME_PLANTATTACK" },
            { "trigger":"CONST_ME_TUTORIALARROW", "contents": "CONST_ME_TUTORIALARROW" },
            { "trigger":"CONST_ME_TUTORIALSQUARE", "contents": "CONST_ME_TUTORIALSQUARE" },
            { "trigger":"CONST_ME_MIRRORHORIZONTAL", "contents": "CONST_ME_MIRRORHORIZONTAL" },
            { "trigger":"CONST_ME_MIRRORVERTICAL", "contents": "CONST_ME_MIRRORVERTICAL" },
            { "trigger":"CONST_ME_SKULLHORIZONTAL", "contents": "CONST_ME_SKULLHORIZONTAL" },
            { "trigger":"CONST_ME_SKULLVERTICAL", "contents": "CONST_ME_SKULLVERTICAL" },
            { "trigger":"CONST_ME_ASSASSIN", "contents": "CONST_ME_ASSASSIN" },
            { "trigger":"CONST_ME_STEPSHORIZONTAL", "contents": "CONST_ME_STEPSHORIZONTAL" },
            { "trigger":"CONST_ME_BLOODYSTEPS", "contents": "CONST_ME_BLOODYSTEPS" },
            { "trigger":"CONST_ME_STEPSVERTICAL", "contents": "CONST_ME_STEPSVERTICAL" },
            { "trigger":"CONST_ME_YALAHARIGHOST", "contents": "CONST_ME_YALAHARIGHOST" },
            { "trigger":"CONST_ME_BATS", "contents": "CONST_ME_BATS" },
            { "trigger":"CONST_ME_SMOKE", "contents": "CONST_ME_SMOKE" },
            { "trigger":"CONST_ME_INSECTS", "contents": "CONST_ME_INSECTS" },
            { "trigger":"CONST_ME_DRAGONHEAD", "contents": "CONST_ME_DRAGONHEAD" },
            { "trigger":"CONST_ME_ORCSHAMAN", "contents": "CONST_ME_ORCSHAMAN" },
            { "trigger":"CONST_ME_ORCSHAMAN_FIRE", "contents": "CONST_ME_ORCSHAMAN_FIRE" },
            { "trigger":"CONST_ME_THUNDER", "contents": "CONST_ME_THUNDER" },
            { "trigger":"CONST_ME_FERUMBRAS", "contents": "CONST_ME_FERUMBRAS" },
            { "trigger":"CONST_ME_CONFETTI_HORIZONTAL", "contents": "CONST_ME_CONFETTI_HORIZONTAL" },
            { "trigger":"CONST_ME_CONFETTI_VERTICAL", "contents": "CONST_ME_CONFETTI_VERTICAL" },
            { "trigger":"CONST_ME_BLACKSMOKE", "contents": "CONST_ME_BLACKSMOKE" },
            { "trigger":"CONST_ME_NONE", "contents": "CONST_ME_NONE" },
            { "trigger":"CONST_ANI_SPEAR", "contents": "CONST_ANI_SPEAR" },
            { "trigger":"CONST_ANI_BOLT", "contents": "CONST_ANI_BOLT" },
            { "trigger":"CONST_ANI_ARROW", "contents": "CONST_ANI_ARROW" },
            { "trigger":"CONST_ANI_FIRE", "contents": "CONST_ANI_FIRE" },
            { "trigger":"CONST_ANI_ENERGY", "contents": "CONST_ANI_ENERGY" },
            { "trigger":"CONST_ANI_POISONARROW", "contents": "CONST_ANI_POISONARROW" },
            { "trigger":"CONST_ANI_BURSTARROW", "contents": "CONST_ANI_BURSTARROW" },
            { "trigger":"CONST_ANI_THROWINGSTAR", "contents": "CONST_ANI_THROWINGSTAR" },
            { "trigger":"CONST_ANI_THROWINGKNIFE", "contents": "CONST_ANI_THROWINGKNIFE" },
            { "trigger":"CONST_ANI_SMALLSTONE", "contents": "CONST_ANI_SMALLSTONE" },
            { "trigger":"CONST_ANI_DEATH", "contents": "CONST_ANI_DEATH" },
            { "trigger":"CONST_ANI_LARGEROCK", "contents": "CONST_ANI_LARGEROCK" },
            { "trigger":"CONST_ANI_SNOWBALL", "contents": "CONST_ANI_SNOWBALL" },
            { "trigger":"CONST_ANI_POWERBOLT", "contents": "CONST_ANI_POWERBOLT" },
            { "trigger":"CONST_ANI_POISON", "contents": "CONST_ANI_POISON" },
            { "trigger":"CONST_ANI_INFERNALBOLT", "contents": "CONST_ANI_INFERNALBOLT" },
            { "trigger":"CONST_ANI_HUNTINGSPEAR", "contents": "CONST_ANI_HUNTINGSPEAR" },
            { "trigger":"CONST_ANI_ENCHANTEDSPEAR", "contents": "CONST_ANI_ENCHANTEDSPEAR" },
            { "trigger":"CONST_ANI_REDSTAR", "contents": "CONST_ANI_REDSTAR" },
            { "trigger":"CONST_ANI_GREENSTAR", "contents": "CONST_ANI_GREENSTAR" },
            { "trigger":"CONST_ANI_ROYALSPEAR", "contents": "CONST_ANI_ROYALSPEAR" },
            { "trigger":"CONST_ANI_SNIPERARROW", "contents": "CONST_ANI_SNIPERARROW" },
            { "trigger":"CONST_ANI_ONYXARROW", "contents": "CONST_ANI_ONYXARROW" },
            { "trigger":"CONST_ANI_PIERCINGBOLT", "contents": "CONST_ANI_PIERCINGBOLT" },
            { "trigger":"CONST_ANI_WHIRLWINDSWORD", "contents": "CONST_ANI_WHIRLWINDSWORD" },
            { "trigger":"CONST_ANI_WHIRLWINDAXE", "contents": "CONST_ANI_WHIRLWINDAXE" },
            { "trigger":"CONST_ANI_WHIRLWINDCLUB", "contents": "CONST_ANI_WHIRLWINDCLUB" },
            { "trigger":"CONST_ANI_ETHEREALSPEAR", "contents": "CONST_ANI_ETHEREALSPEAR" },
            { "trigger":"CONST_ANI_ICE", "contents": "CONST_ANI_ICE" },
            { "trigger":"CONST_ANI_EARTH", "contents": "CONST_ANI_EARTH" },
            { "trigger":"CONST_ANI_HOLY", "contents": "CONST_ANI_HOLY" },
            { "trigger":"CONST_ANI_SUDDENDEATH", "contents": "CONST_ANI_SUDDENDEATH" },
            { "trigger":"CONST_ANI_FLASHARROW", "contents": "CONST_ANI_FLASHARROW" },
            { "trigger":"CONST_ANI_FLAMMINGARROW", "contents": "CONST_ANI_FLAMMINGARROW" },
            { "trigger":"CONST_ANI_SHIVERARROW", "contents": "CONST_ANI_SHIVERARROW" },
            { "trigger":"CONST_ANI_ENERGYBALL", "contents": "CONST_ANI_ENERGYBALL" },
            { "trigger":"CONST_ANI_SMALLICE", "contents": "CONST_ANI_SMALLICE" },
            { "trigger":"CONST_ANI_SMALLHOLY", "contents": "CONST_ANI_SMALLHOLY" },
            { "trigger":"CONST_ANI_SMALLEARTH", "contents": "CONST_ANI_SMALLEARTH" },
            { "trigger":"CONST_ANI_EARTHARROW", "contents": "CONST_ANI_EARTHARROW" },
            { "trigger":"CONST_ANI_EXPLOSION", "contents": "CONST_ANI_EXPLOSION" },
            { "trigger":"CONST_ANI_CAKE", "contents": "CONST_ANI_CAKE" },
            { "trigger":"CONST_ANI_TARSALARROW", "contents": "CONST_ANI_TARSALARROW" },
            { "trigger":"CONST_ANI_VORTEXBOLT", "contents": "CONST_ANI_VORTEXBOLT" },
            { "trigger":"CONST_ANI_PRISMATICBOLT", "contents": "CONST_ANI_PRISMATICBOLT" },
            { "trigger":"CONST_ANI_CRYSTALLINEARROW", "contents": "CONST_ANI_CRYSTALLINEARROW" },
            { "trigger":"CONST_ANI_DRILLBOLT", "contents": "CONST_ANI_DRILLBOLT" },
            { "trigger":"CONST_ANI_ENVENOMEDARROW", "contents": "CONST_ANI_ENVENOMEDARROW" },
            { "trigger":"CONST_ANI_WEAPONTYPE", "contents": "CONST_ANI_WEAPONTYPE" },
            { "trigger":"CONST_ANI_NONE", "contents": "CONST_ANI_NONE" },
            { "trigger":"CONST_PROP_BLOCKSOLID", "contents": "CONST_PROP_BLOCKSOLID" },
            { "trigger":"CONST_PROP_HASHEIGHT", "contents": "CONST_PROP_HASHEIGHT" },
            { "trigger":"CONST_PROP_BLOCKPROJECTILE", "contents": "CONST_PROP_BLOCKPROJECTILE" },
            { "trigger":"CONST_PROP_BLOCKPATH", "contents": "CONST_PROP_BLOCKPATH" },
            { "trigger":"CONST_PROP_ISVERTICAL", "contents": "CONST_PROP_ISVERTICAL" },
            { "trigger":"CONST_PROP_ISHORIZONTAL", "contents": "CONST_PROP_ISHORIZONTAL" },
            { "trigger":"CONST_PROP_MOVEABLE", "contents": "CONST_PROP_MOVEABLE" },
            { "trigger":"CONST_PROP_IMMOVABLEBLOCKSOLID", "contents": "CONST_PROP_IMMOVABLEBLOCKSOLID" },
            { "trigger":"CONST_PROP_IMMOVABLEBLOCKPATH", "contents": "CONST_PROP_IMMOVABLEBLOCKPATH" },
            { "trigger":"CONST_PROP_IMMOVABLENOFIELDBLOCKPATH", "contents": "CONST_PROP_IMMOVABLENOFIELDBLOCKPATH" },
            { "trigger":"CONST_PROP_NOFIELDBLOCKPATH", "contents": "CONST_PROP_NOFIELDBLOCKPATH" },
            { "trigger":"CONST_PROP_SUPPORTHANGABLE", "contents": "CONST_PROP_SUPPORTHANGABLE" },
            { "trigger":"CONST_SLOT_HEAD", "contents": "CONST_SLOT_HEAD" },
            { "trigger":"CONST_SLOT_NECKLACE", "contents": "CONST_SLOT_NECKLACE" },
            { "trigger":"CONST_SLOT_BACKPACK", "contents": "CONST_SLOT_BACKPACK" },
            { "trigger":"CONST_SLOT_ARMOR", "contents": "CONST_SLOT_ARMOR" },
            { "trigger":"CONST_SLOT_RIGHT", "contents": "CONST_SLOT_RIGHT" },
            { "trigger":"CONST_SLOT_LEFT", "contents": "CONST_SLOT_LEFT" },
            { "trigger":"CONST_SLOT_LEGS", "contents": "CONST_SLOT_LEGS" },
            { "trigger":"CONST_SLOT_FEET", "contents": "CONST_SLOT_FEET" },
            { "trigger":"CONST_SLOT_RING", "contents": "CONST_SLOT_RING" },
            { "trigger":"CONST_SLOT_AMMO", "contents": "CONST_SLOT_AMMO" },
            { "trigger":"GAME_STATE_STARTUP", "contents": "GAME_STATE_STARTUP" },
            { "trigger":"GAME_STATE_INIT", "contents": "GAME_STATE_INIT" },
            { "trigger":"GAME_STATE_NORMAL", "contents": "GAME_STATE_NORMAL" },
            { "trigger":"GAME_STATE_CLOSED", "contents": "GAME_STATE_CLOSED" },
            { "trigger":"GAME_STATE_SHUTDOWN", "contents": "GAME_STATE_SHUTDOWN" },
            { "trigger":"GAME_STATE_CLOSING", "contents": "GAME_STATE_CLOSING" },
            { "trigger":"GAME_STATE_MAINTAIN", "contents": "GAME_STATE_MAINTAIN" },
            { "trigger":"MESSAGE_STATUS_CONSOLE_BLUE", "contents": "MESSAGE_STATUS_CONSOLE_BLUE" },
            { "trigger":"MESSAGE_STATUS_CONSOLE_RED", "contents": "MESSAGE_STATUS_CONSOLE_RED" },
            { "trigger":"MESSAGE_STATUS_DEFAULT", "contents": "MESSAGE_STATUS_DEFAULT" },
            { "trigger":"MESSAGE_STATUS_WARNING", "contents": "MESSAGE_STATUS_WARNING" },
            { "trigger":"MESSAGE_EVENT_ADVANCE", "contents": "MESSAGE_EVENT_ADVANCE" },
            { "trigger":"MESSAGE_STATUS_SMALL", "contents": "MESSAGE_STATUS_SMALL" },
            { "trigger":"MESSAGE_INFO_DESCR", "contents": "MESSAGE_INFO_DESCR" },
            { "trigger":"MESSAGE_DAMAGE_DEALT", "contents": "MESSAGE_DAMAGE_DEALT" },
            { "trigger":"MESSAGE_DAMAGE_RECEIVED", "contents": "MESSAGE_DAMAGE_RECEIVED" },
            { "trigger":"MESSAGE_HEALED", "contents": "MESSAGE_HEALED" },
            { "trigger":"MESSAGE_EXPERIENCE", "contents": "MESSAGE_EXPERIENCE" },
            { "trigger":"MESSAGE_DAMAGE_OTHERS", "contents": "MESSAGE_DAMAGE_OTHERS" },
            { "trigger":"MESSAGE_HEALED_OTHERS", "contents": "MESSAGE_HEALED_OTHERS" },
            { "trigger":"MESSAGE_EXPERIENCE_OTHERS", "contents": "MESSAGE_EXPERIENCE_OTHERS" },
            { "trigger":"MESSAGE_EVENT_DEFAULT", "contents": "MESSAGE_EVENT_DEFAULT" },
            { "trigger":"MESSAGE_EVENT_ORANGE", "contents": "MESSAGE_EVENT_ORANGE" },
            { "trigger":"MESSAGE_STATUS_CONSOLE_ORANGE", "contents": "MESSAGE_STATUS_CONSOLE_ORANGE" },
            { "trigger":"CLIENTOS_LINUX", "contents": "CLIENTOS_LINUX" },
            { "trigger":"CLIENTOS_WINDOWS", "contents": "CLIENTOS_WINDOWS" },
            { "trigger":"CLIENTOS_FLASH", "contents": "CLIENTOS_FLASH" },
            { "trigger":"CLIENTOS_OTCLIENT_LINUX", "contents": "CLIENTOS_OTCLIENT_LINUX" },
            { "trigger":"CLIENTOS_OTCLIENT_WINDOWS", "contents": "CLIENTOS_OTCLIENT_WINDOWS" },
            { "trigger":"CLIENTOS_OTCLIENT_MAC", "contents": "CLIENTOS_OTCLIENT_MAC" },
            { "trigger":"ITEM_ATTRIBUTE_NONE", "contents": "ITEM_ATTRIBUTE_NONE" },
            { "trigger":"ITEM_ATTRIBUTE_ACTIONID", "contents": "ITEM_ATTRIBUTE_ACTIONID" },
            { "trigger":"ITEM_ATTRIBUTE_UNIQUEID", "contents": "ITEM_ATTRIBUTE_UNIQUEID" },
            { "trigger":"ITEM_ATTRIBUTE_DESCRIPTION", "contents": "ITEM_ATTRIBUTE_DESCRIPTION" },
            { "trigger":"ITEM_ATTRIBUTE_TEXT", "contents": "ITEM_ATTRIBUTE_TEXT" },
            { "trigger":"ITEM_ATTRIBUTE_DATE", "contents": "ITEM_ATTRIBUTE_DATE" },
            { "trigger":"ITEM_ATTRIBUTE_WRITER", "contents": "ITEM_ATTRIBUTE_WRITER" },
            { "trigger":"ITEM_ATTRIBUTE_NAME", "contents": "ITEM_ATTRIBUTE_NAME" },
            { "trigger":"ITEM_ATTRIBUTE_ARTICLE", "contents": "ITEM_ATTRIBUTE_ARTICLE" },
            { "trigger":"ITEM_ATTRIBUTE_PLURALNAME", "contents": "ITEM_ATTRIBUTE_PLURALNAME" },
            { "trigger":"ITEM_ATTRIBUTE_WEIGHT", "contents": "ITEM_ATTRIBUTE_WEIGHT" },
            { "trigger":"ITEM_ATTRIBUTE_ATTACK", "contents": "ITEM_ATTRIBUTE_ATTACK" },
            { "trigger":"ITEM_ATTRIBUTE_DEFENSE", "contents": "ITEM_ATTRIBUTE_DEFENSE" },
            { "trigger":"ITEM_ATTRIBUTE_EXTRADEFENSE", "contents": "ITEM_ATTRIBUTE_EXTRADEFENSE" },
            { "trigger":"ITEM_ATTRIBUTE_ARMOR", "contents": "ITEM_ATTRIBUTE_ARMOR" },
            { "trigger":"ITEM_ATTRIBUTE_HITCHANCE", "contents": "ITEM_ATTRIBUTE_HITCHANCE" },
            { "trigger":"ITEM_ATTRIBUTE_SHOOTRANGE", "contents": "ITEM_ATTRIBUTE_SHOOTRANGE" },
            { "trigger":"ITEM_ATTRIBUTE_OWNER", "contents": "ITEM_ATTRIBUTE_OWNER" },
            { "trigger":"ITEM_ATTRIBUTE_DURATION", "contents": "ITEM_ATTRIBUTE_DURATION" },
            { "trigger":"ITEM_ATTRIBUTE_DECAYSTATE", "contents": "ITEM_ATTRIBUTE_DECAYSTATE" },
            { "trigger":"ITEM_ATTRIBUTE_CORPSEOWNER", "contents": "ITEM_ATTRIBUTE_CORPSEOWNER" },
            { "trigger":"ITEM_ATTRIBUTE_CHARGES", "contents": "ITEM_ATTRIBUTE_CHARGES" },
            { "trigger":"ITEM_ATTRIBUTE_FLUIDTYPE", "contents": "ITEM_ATTRIBUTE_FLUIDTYPE" },
            { "trigger":"ITEM_ATTRIBUTE_DOORID", "contents": "ITEM_ATTRIBUTE_DOORID" },
            { "trigger":"ITEM_TYPE_DEPOT", "contents": "ITEM_TYPE_DEPOT" },
            { "trigger":"ITEM_TYPE_MAILBOX", "contents": "ITEM_TYPE_MAILBOX" },
            { "trigger":"ITEM_TYPE_TRASHHOLDER", "contents": "ITEM_TYPE_TRASHHOLDER" },
            { "trigger":"ITEM_TYPE_CONTAINER", "contents": "ITEM_TYPE_CONTAINER" },
            { "trigger":"ITEM_TYPE_DOOR", "contents": "ITEM_TYPE_DOOR" },
            { "trigger":"ITEM_TYPE_MAGICFIELD", "contents": "ITEM_TYPE_MAGICFIELD" },
            { "trigger":"ITEM_TYPE_TELEPORT", "contents": "ITEM_TYPE_TELEPORT" },
            { "trigger":"ITEM_TYPE_BED", "contents": "ITEM_TYPE_BED" },
            { "trigger":"ITEM_TYPE_KEY", "contents": "ITEM_TYPE_KEY" },
            { "trigger":"ITEM_TYPE_RUNE", "contents": "ITEM_TYPE_RUNE" },
            { "trigger":"ITEM_GOLD_COIN", "contents": "ITEM_GOLD_COIN" },
            { "trigger":"ITEM_PLATINUM_COIN", "contents": "ITEM_PLATINUM_COIN" },
            { "trigger":"ITEM_CRYSTAL_COIN", "contents": "ITEM_CRYSTAL_COIN" },
            { "trigger":"ITEM_PARCEL", "contents": "ITEM_PARCEL" },
            { "trigger":"ITEM_LABEL", "contents": "ITEM_LABEL" },
            { "trigger":"ITEM_FIREFIELD_PVP_FULL", "contents": "ITEM_FIREFIELD_PVP_FULL" },
            { "trigger":"ITEM_FIREFIELD_PVP_MEDIUM", "contents": "ITEM_FIREFIELD_PVP_MEDIUM" },
            { "trigger":"ITEM_FIREFIELD_PVP_SMALL", "contents": "ITEM_FIREFIELD_PVP_SMALL" },
            { "trigger":"ITEM_FIREFIELD_PERSISTENT_FULL", "contents": "ITEM_FIREFIELD_PERSISTENT_FULL" },
            { "trigger":"ITEM_FIREFIELD_PERSISTENT_MEDIUM", "contents": "ITEM_FIREFIELD_PERSISTENT_MEDIUM" },
            { "trigger":"ITEM_FIREFIELD_PERSISTENT_SMALL", "contents": "ITEM_FIREFIELD_PERSISTENT_SMALL" },
            { "trigger":"ITEM_FIREFIELD_NOPVP", "contents": "ITEM_FIREFIELD_NOPVP" },
            { "trigger":"ITEM_POISONFIELD_PVP", "contents": "ITEM_POISONFIELD_PVP" },
            { "trigger":"ITEM_POISONFIELD_PERSISTENT", "contents": "ITEM_POISONFIELD_PERSISTENT" },
            { "trigger":"ITEM_POISONFIELD_NOPVP", "contents": "ITEM_POISONFIELD_NOPVP" },
            { "trigger":"ITEM_ENERGYFIELD_PVP", "contents": "ITEM_ENERGYFIELD_PVP" },
            { "trigger":"ITEM_ENERGYFIELD_PERSISTENT", "contents": "ITEM_ENERGYFIELD_PERSISTENT" },
            { "trigger":"ITEM_ENERGYFIELD_NOPVP", "contents": "ITEM_ENERGYFIELD_NOPVP" },
            { "trigger":"ITEM_MAGICWALL", "contents": "ITEM_MAGICWALL" },
            { "trigger":"ITEM_MAGICWALL_PERSISTENT", "contents": "ITEM_MAGICWALL_PERSISTENT" },
            { "trigger":"ITEM_MAGICWALL_SAFE", "contents": "ITEM_MAGICWALL_SAFE" },
            { "trigger":"ITEM_WILDGROWTH", "contents": "ITEM_WILDGROWTH" },
            { "trigger":"ITEM_WILDGROWTH_PERSISTENT", "contents": "ITEM_WILDGROWTH_PERSISTENT" },
            { "trigger":"ITEM_WILDGROWTH_SAFE", "contents": "ITEM_WILDGROWTH_SAFE" },
            { "trigger":"PlayerFlag_CannotUseCombat", "contents": "PlayerFlag_CannotUseCombat" },
            { "trigger":"PlayerFlag_CannotAttackPlayer", "contents": "PlayerFlag_CannotAttackPlayer" },
            { "trigger":"PlayerFlag_CannotAttackMonster", "contents": "PlayerFlag_CannotAttackMonster" },
            { "trigger":"PlayerFlag_CannotBeAttacked", "contents": "PlayerFlag_CannotBeAttacked" },
            { "trigger":"PlayerFlag_CanConvinceAll", "contents": "PlayerFlag_CanConvinceAll" },
            { "trigger":"PlayerFlag_CanSummonAll", "contents": "PlayerFlag_CanSummonAll" },
            { "trigger":"PlayerFlag_CanIllusionAll", "contents": "PlayerFlag_CanIllusionAll" },
            { "trigger":"PlayerFlag_CanSenseInvisibility", "contents": "PlayerFlag_CanSenseInvisibility" },
            { "trigger":"PlayerFlag_IgnoredByMonsters", "contents": "PlayerFlag_IgnoredByMonsters" },
            { "trigger":"PlayerFlag_NotGainInFight", "contents": "PlayerFlag_NotGainInFight" },
            { "trigger":"PlayerFlag_HasInfiniteMana", "contents": "PlayerFlag_HasInfiniteMana" },
            { "trigger":"PlayerFlag_HasInfiniteSoul", "contents": "PlayerFlag_HasInfiniteSoul" },
            { "trigger":"PlayerFlag_HasNoExhaustion", "contents": "PlayerFlag_HasNoExhaustion" },
            { "trigger":"PlayerFlag_CannotUseSpells", "contents": "PlayerFlag_CannotUseSpells" },
            { "trigger":"PlayerFlag_CannotPickupItem", "contents": "PlayerFlag_CannotPickupItem" },
            { "trigger":"PlayerFlag_CanAlwaysLogin", "contents": "PlayerFlag_CanAlwaysLogin" },
            { "trigger":"PlayerFlag_CanBroadcast", "contents": "PlayerFlag_CanBroadcast" },
            { "trigger":"PlayerFlag_CanEditHouses", "contents": "PlayerFlag_CanEditHouses" },
            { "trigger":"PlayerFlag_CannotBeBanned", "contents": "PlayerFlag_CannotBeBanned" },
            { "trigger":"PlayerFlag_CannotBePushed", "contents": "PlayerFlag_CannotBePushed" },
            { "trigger":"PlayerFlag_HasInfiniteCapacity", "contents": "PlayerFlag_HasInfiniteCapacity" },
            { "trigger":"PlayerFlag_CanPushAllCreatures", "contents": "PlayerFlag_CanPushAllCreatures" },
            { "trigger":"PlayerFlag_CanTalkRedPrivate", "contents": "PlayerFlag_CanTalkRedPrivate" },
            { "trigger":"PlayerFlag_CanTalkRedChannel", "contents": "PlayerFlag_CanTalkRedChannel" },
            { "trigger":"PlayerFlag_TalkOrangeHelpChannel", "contents": "PlayerFlag_TalkOrangeHelpChannel" },
            { "trigger":"PlayerFlag_NotGainExperience", "contents": "PlayerFlag_NotGainExperience" },
            { "trigger":"PlayerFlag_NotGainMana", "contents": "PlayerFlag_NotGainMana" },
            { "trigger":"PlayerFlag_NotGainHealth", "contents": "PlayerFlag_NotGainHealth" },
            { "trigger":"PlayerFlag_NotGainSkill", "contents": "PlayerFlag_NotGainSkill" },
            { "trigger":"PlayerFlag_SetMaxSpeed", "contents": "PlayerFlag_SetMaxSpeed" },
            { "trigger":"PlayerFlag_SpecialVIP", "contents": "PlayerFlag_SpecialVIP" },
            { "trigger":"PlayerFlag_NotGenerateLoot", "contents": "PlayerFlag_NotGenerateLoot" },
            { "trigger":"PlayerFlag_CanTalkRedChannelAnonymous", "contents": "PlayerFlag_CanTalkRedChannelAnonymous" },
            { "trigger":"PlayerFlag_IgnoreProtectionZone", "contents": "PlayerFlag_IgnoreProtectionZone" },
            { "trigger":"PlayerFlag_IgnoreSpellCheck", "contents": "PlayerFlag_IgnoreSpellCheck" },
            { "trigger":"PlayerFlag_IgnoreWeaponCheck", "contents": "PlayerFlag_IgnoreWeaponCheck" },
            { "trigger":"PlayerFlag_CannotBeMuted", "contents": "PlayerFlag_CannotBeMuted" },
            { "trigger":"PlayerFlag_IsAlwaysPremium", "contents": "PlayerFlag_IsAlwaysPremium" },
            { "trigger":"PLAYERSEX_FEMALE", "contents": "PLAYERSEX_FEMALE" },
            { "trigger":"PLAYERSEX_MALE", "contents": "PLAYERSEX_MALE" },
            { "trigger":"SKILL_FIST", "contents": "SKILL_FIST" },
            { "trigger":"SKILL_CLUB", "contents": "SKILL_CLUB" },
            { "trigger":"SKILL_SWORD", "contents": "SKILL_SWORD" },
            { "trigger":"SKILL_AXE", "contents": "SKILL_AXE" },
            { "trigger":"SKILL_DISTANCE", "contents": "SKILL_DISTANCE" },
            { "trigger":"SKILL_SHIELD", "contents": "SKILL_SHIELD" },
            { "trigger":"SKILL_FISHING", "contents": "SKILL_FISHING" },
            { "trigger":"SKILL_MAGLEVEL", "contents": "SKILL_MAGLEVEL" },
            { "trigger":"SKILLVALUE_LEVEL", "contents": "SKILLVALUE_LEVEL" },
            { "trigger":"SKULL_NONE", "contents": "SKULL_NONE" },
            { "trigger":"SKULL_YELLOW", "contents": "SKULL_YELLOW" },
            { "trigger":"SKULL_GREEN", "contents": "SKULL_GREEN" },
            { "trigger":"SKULL_WHITE", "contents": "SKULL_WHITE" },
            { "trigger":"SKULL_RED", "contents": "SKULL_RED" },
            { "trigger":"SKULL_BLACK", "contents": "SKULL_BLACK" },
            { "trigger":"SKULL_ORANGE", "contents": "SKULL_ORANGE" },
            { "trigger":"TALKTYPE_SAY", "contents": "TALKTYPE_SAY" },
            { "trigger":"TALKTYPE_WHISPER", "contents": "TALKTYPE_WHISPER" },
            { "trigger":"TALKTYPE_YELL", "contents": "TALKTYPE_YELL" },
            { "trigger":"TALKTYPE_PRIVATE_FROM", "contents": "TALKTYPE_PRIVATE_FROM" },
            { "trigger":"TALKTYPE_PRIVATE_TO", "contents": "TALKTYPE_PRIVATE_TO" },
            { "trigger":"TALKTYPE_CHANNEL_Y", "contents": "TALKTYPE_CHANNEL_Y" },
            { "trigger":"TALKTYPE_CHANNEL_O", "contents": "TALKTYPE_CHANNEL_O" },
            { "trigger":"TALKTYPE_PRIVATE_NP", "contents": "TALKTYPE_PRIVATE_NP" },
            { "trigger":"TALKTYPE_PRIVATE_PN", "contents": "TALKTYPE_PRIVATE_PN" },
            { "trigger":"TALKTYPE_BROADCAST", "contents": "TALKTYPE_BROADCAST" },
            { "trigger":"TALKTYPE_CHANNEL_R1", "contents": "TALKTYPE_CHANNEL_R1" },
            { "trigger":"TALKTYPE_PRIVATE_RED_FROM", "contents": "TALKTYPE_PRIVATE_RED_FROM" },
            { "trigger":"TALKTYPE_PRIVATE_RED_TO", "contents": "TALKTYPE_PRIVATE_RED_TO" },
            { "trigger":"TALKTYPE_MONSTER_SAY", "contents": "TALKTYPE_MONSTER_SAY" },
            { "trigger":"TALKTYPE_MONSTER_YELL", "contents": "TALKTYPE_MONSTER_YELL" },
            { "trigger":"TALKTYPE_CHANNEL_R2", "contents": "TALKTYPE_CHANNEL_R2" },
            { "trigger":"TALKTYPE_CHANNEL_W", "contents": "TALKTYPE_CHANNEL_W" },
            { "trigger":"TEXTCOLOR_BLUE", "contents": "TEXTCOLOR_BLUE" },
            { "trigger":"TEXTCOLOR_LIGHTGREEN", "contents": "TEXTCOLOR_LIGHTGREEN" },
            { "trigger":"TEXTCOLOR_LIGHTBLUE", "contents": "TEXTCOLOR_LIGHTBLUE" },
            { "trigger":"TEXTCOLOR_MAYABLUE", "contents": "TEXTCOLOR_MAYABLUE" },
            { "trigger":"TEXTCOLOR_DARKRED", "contents": "TEXTCOLOR_DARKRED" },
            { "trigger":"TEXTCOLOR_LIGHTGREY", "contents": "TEXTCOLOR_LIGHTGREY" },
            { "trigger":"TEXTCOLOR_SKYBLUE", "contents": "TEXTCOLOR_SKYBLUE" },
            { "trigger":"TEXTCOLOR_PURPLE", "contents": "TEXTCOLOR_PURPLE" },
            { "trigger":"TEXTCOLOR_RED", "contents": "TEXTCOLOR_RED" },
            { "trigger":"TEXTCOLOR_ORANGE", "contents": "TEXTCOLOR_ORANGE" },
            { "trigger":"TEXTCOLOR_YELLOW", "contents": "TEXTCOLOR_YELLOW" },
            { "trigger":"TEXTCOLOR_WHITE_EXP", "contents": "TEXTCOLOR_WHITE_EXP" },
            { "trigger":"TEXTCOLOR_NONE", "contents": "TEXTCOLOR_NONE" },
            { "trigger":"TILESTATE_NONE", "contents": "TILESTATE_NONE" },
            { "trigger":"TILESTATE_PROTECTIONZONE", "contents": "TILESTATE_PROTECTIONZONE" },
            { "trigger":"TILESTATE_DEPRECATED_HOUSE", "contents": "TILESTATE_DEPRECATED_HOUSE" },
            { "trigger":"TILESTATE_NOPVPZONE", "contents": "TILESTATE_NOPVPZONE" },
            { "trigger":"TILESTATE_NOLOGOUT", "contents": "TILESTATE_NOLOGOUT" },
            { "trigger":"TILESTATE_PVPZONE", "contents": "TILESTATE_PVPZONE" },
            { "trigger":"TILESTATE_REFRESH", "contents": "TILESTATE_REFRESH" },
            { "trigger":"TILESTATE_HOUSE", "contents": "TILESTATE_HOUSE" },
            { "trigger":"TILESTATE_FLOORCHANGE", "contents": "TILESTATE_FLOORCHANGE" },
            { "trigger":"TILESTATE_FLOORCHANGE_DOWN", "contents": "TILESTATE_FLOORCHANGE_DOWN" },
            { "trigger":"TILESTATE_FLOORCHANGE_NORTH", "contents": "TILESTATE_FLOORCHANGE_NORTH" },
            { "trigger":"TILESTATE_FLOORCHANGE_SOUTH", "contents": "TILESTATE_FLOORCHANGE_SOUTH" },
            { "trigger":"TILESTATE_FLOORCHANGE_EAST", "contents": "TILESTATE_FLOORCHANGE_EAST" },
            { "trigger":"TILESTATE_FLOORCHANGE_WEST", "contents": "TILESTATE_FLOORCHANGE_WEST" },
            { "trigger":"TILESTATE_TELEPORT", "contents": "TILESTATE_TELEPORT" },
            { "trigger":"TILESTATE_MAGICFIELD", "contents": "TILESTATE_MAGICFIELD" },
            { "trigger":"TILESTATE_MAILBOX", "contents": "TILESTATE_MAILBOX" },
            { "trigger":"TILESTATE_TRASHHOLDER", "contents": "TILESTATE_TRASHHOLDER" },
            { "trigger":"TILESTATE_BED", "contents": "TILESTATE_BED" },
            { "trigger":"TILESTATE_DEPOT", "contents": "TILESTATE_DEPOT" },
            { "trigger":"TILESTATE_BLOCKSOLID", "contents": "TILESTATE_BLOCKSOLID" },
            { "trigger":"TILESTATE_BLOCKPATH", "contents": "TILESTATE_BLOCKPATH" },
            { "trigger":"TILESTATE_IMMOVABLEBLOCKSOLID", "contents": "TILESTATE_IMMOVABLEBLOCKSOLID" },
            { "trigger":"TILESTATE_IMMOVABLEBLOCKPATH", "contents": "TILESTATE_IMMOVABLEBLOCKPATH" },
            { "trigger":"TILESTATE_IMMOVABLENOFIELDBLOCKPATH", "contents": "TILESTATE_IMMOVABLENOFIELDBLOCKPATH" },
            { "trigger":"TILESTATE_NOFIELDBLOCKPATH", "contents": "TILESTATE_NOFIELDBLOCKPATH" },
            { "trigger":"TILESTATE_DYNAMIC_TILE", "contents": "TILESTATE_DYNAMIC_TILE" },
            { "trigger":"TILESTATE_FLOORCHANGE_SOUTH_ALT", "contents": "TILESTATE_FLOORCHANGE_SOUTH_ALT" },
            { "trigger":"TILESTATE_FLOORCHANGE_EAST_ALT", "contents": "TILESTATE_FLOORCHANGE_EAST_ALT" },
            { "trigger":"TILESTATE_SUPPORTS_HANGABLE", "contents": "TILESTATE_SUPPORTS_HANGABLE" },
            { "trigger":"WEAPON_NONE", "contents": "WEAPON_NONE" },
            { "trigger":"WEAPON_SWORD", "contents": "WEAPON_SWORD" },
            { "trigger":"WEAPON_CLUB", "contents": "WEAPON_CLUB" },
            { "trigger":"WEAPON_AXE", "contents": "WEAPON_AXE" },
            { "trigger":"WEAPON_SHIELD", "contents": "WEAPON_SHIELD" },
            { "trigger":"WEAPON_DISTANCE", "contents": "WEAPON_DISTANCE" },
            { "trigger":"WEAPON_WAND", "contents": "WEAPON_WAND" },
            { "trigger":"WEAPON_AMMO", "contents": "WEAPON_AMMO" },
            { "trigger":"WORLD_TYPE_NO_PVP", "contents": "WORLD_TYPE_NO_PVP" },
            { "trigger":"WORLD_TYPE_PVP", "contents": "WORLD_TYPE_PVP" },
            { "trigger":"WORLD_TYPE_PVP_ENFORCED", "contents": "WORLD_TYPE_PVP_ENFORCED" },
            { "trigger":"FLAG_NOLIMIT", "contents": "FLAG_NOLIMIT" },
            { "trigger":"FLAG_IGNOREBLOCKITEM", "contents": "FLAG_IGNOREBLOCKITEM" },
            { "trigger":"FLAG_IGNOREBLOCKCREATURE", "contents": "FLAG_IGNOREBLOCKCREATURE" },
            { "trigger":"FLAG_CHILDISOWNER", "contents": "FLAG_CHILDISOWNER" },
            { "trigger":"FLAG_PATHFINDING", "contents": "FLAG_PATHFINDING" },
            { "trigger":"FLAG_IGNOREFIELDDAMAGE", "contents": "FLAG_IGNOREFIELDDAMAGE" },
            { "trigger":"FLAG_IGNORENOTMOVEABLE", "contents": "FLAG_IGNORENOTMOVEABLE" },
            { "trigger":"FLAG_IGNOREAUTOSTACK", "contents": "FLAG_IGNOREAUTOSTACK" },
            { "trigger":"SLOTP_WHEREEVER", "contents": "SLOTP_WHEREEVER" },
            { "trigger":"SLOTP_HEAD", "contents": "SLOTP_HEAD" },
            { "trigger":"SLOTP_NECKLACE", "contents": "SLOTP_NECKLACE" },
            { "trigger":"SLOTP_BACKPACK", "contents": "SLOTP_BACKPACK" },
            { "trigger":"SLOTP_ARMOR", "contents": "SLOTP_ARMOR" },
            { "trigger":"SLOTP_RIGHT", "contents": "SLOTP_RIGHT" },
            { "trigger":"SLOTP_LEFT", "contents": "SLOTP_LEFT" },
            { "trigger":"SLOTP_LEGS", "contents": "SLOTP_LEGS" },
            { "trigger":"SLOTP_FEET", "contents": "SLOTP_FEET" },
            { "trigger":"SLOTP_RING", "contents": "SLOTP_RING" },
            { "trigger":"SLOTP_AMMO", "contents": "SLOTP_AMMO" },
            { "trigger":"SLOTP_DEPOT", "contents": "SLOTP_DEPOT" },
            { "trigger":"SLOTP_TWO_HAND", "contents": "SLOTP_TWO_HAND" },
            { "trigger":"ORIGIN_NONE", "contents": "ORIGIN_NONE" },
            { "trigger":"ORIGIN_CONDITION", "contents": "ORIGIN_CONDITION" },
            { "trigger":"ORIGIN_SPELL", "contents": "ORIGIN_SPELL" },
            { "trigger":"ORIGIN_MELEE", "contents": "ORIGIN_MELEE" },
            { "trigger":"ORIGIN_RANGED", "contents": "ORIGIN_RANGED" },
            { "trigger":"GUEST_LIST", "contents": "GUEST_LIST" },
            { "trigger":"SUBOWNER_LIST", "contents": "SUBOWNER_LIST" },
            { "trigger":"SPEECHBUBBLE_NONE", "contents": "SPEECHBUBBLE_NONE" },
            { "trigger":"SPEECHBUBBLE_NORMAL", "contents": "SPEECHBUBBLE_NORMAL" },
            { "trigger":"SPEECHBUBBLE_TRADE", "contents": "SPEECHBUBBLE_TRADE" },
            { "trigger":"SPEECHBUBBLE_QUEST", "contents": "SPEECHBUBBLE_QUEST" },
            { "trigger":"SPEECHBUBBLE_QUESTTRADER", "contents": "SPEECHBUBBLE_QUESTTRADER" },
            { "trigger":"MAPMARK_TICK", "contents": "MAPMARK_TICK" },
            { "trigger":"MAPMARK_QUESTION", "contents": "MAPMARK_QUESTION" },
            { "trigger":"MAPMARK_EXCLAMATION", "contents": "MAPMARK_EXCLAMATION" },
            { "trigger":"MAPMARK_STAR", "contents": "MAPMARK_STAR" },
            { "trigger":"MAPMARK_CROSS", "contents": "MAPMARK_CROSS" },
            { "trigger":"MAPMARK_TEMPLE", "contents": "MAPMARK_TEMPLE" },
            { "trigger":"MAPMARK_KISS", "contents": "MAPMARK_KISS" },
            { "trigger":"MAPMARK_SHOVEL", "contents": "MAPMARK_SHOVEL" },
            { "trigger":"MAPMARK_SWORD", "contents": "MAPMARK_SWORD" },
            { "trigger":"MAPMARK_FLAG", "contents": "MAPMARK_FLAG" },
            { "trigger":"MAPMARK_LOCK", "contents": "MAPMARK_LOCK" },
            { "trigger":"MAPMARK_BAG", "contents": "MAPMARK_BAG" },
            { "trigger":"MAPMARK_SKULL", "contents": "MAPMARK_SKULL" },
            { "trigger":"MAPMARK_DOLLAR", "contents": "MAPMARK_DOLLAR" },
            { "trigger":"MAPMARK_REDNORTH", "contents": "MAPMARK_REDNORTH" },
            { "trigger":"MAPMARK_REDSOUTH", "contents": "MAPMARK_REDSOUTH" },
            { "trigger":"MAPMARK_REDEAST", "contents": "MAPMARK_REDEAST" },
            { "trigger":"MAPMARK_REDWEST", "contents": "MAPMARK_REDWEST" },
            { "trigger":"MAPMARK_GREENNORTH", "contents": "MAPMARK_GREENNORTH" },
            { "trigger":"MAPMARK_GREENSOUTH", "contents": "MAPMARK_GREENSOUTH" },
            { "trigger":"RETURNVALUE_NOERROR", "contents": "RETURNVALUE_NOERROR" },
            { "trigger":"RETURNVALUE_NOTPOSSIBLE", "contents": "RETURNVALUE_NOTPOSSIBLE" },
            { "trigger":"RETURNVALUE_NOTENOUGHROOM", "contents": "RETURNVALUE_NOTENOUGHROOM" },
            { "trigger":"RETURNVALUE_PLAYERISPZLOCKED", "contents": "RETURNVALUE_PLAYERISPZLOCKED" },
            { "trigger":"RETURNVALUE_PLAYERISNOTINVITED", "contents": "RETURNVALUE_PLAYERISNOTINVITED" },
            { "trigger":"RETURNVALUE_CANNOTTHROW", "contents": "RETURNVALUE_CANNOTTHROW" },
            { "trigger":"RETURNVALUE_THEREISNOWAY", "contents": "RETURNVALUE_THEREISNOWAY" },
            { "trigger":"RETURNVALUE_DESTINATIONOUTOFREACH", "contents": "RETURNVALUE_DESTINATIONOUTOFREACH" },
            { "trigger":"RETURNVALUE_CREATUREBLOCK", "contents": "RETURNVALUE_CREATUREBLOCK" },
            { "trigger":"RETURNVALUE_NOTMOVEABLE", "contents": "RETURNVALUE_NOTMOVEABLE" },
            { "trigger":"RETURNVALUE_DROPTWOHANDEDITEM", "contents": "RETURNVALUE_DROPTWOHANDEDITEM" },
            { "trigger":"RETURNVALUE_BOTHHANDSNEEDTOBEFREE", "contents": "RETURNVALUE_BOTHHANDSNEEDTOBEFREE" },
            { "trigger":"RETURNVALUE_CANONLYUSEONEWEAPON", "contents": "RETURNVALUE_CANONLYUSEONEWEAPON" },
            { "trigger":"RETURNVALUE_NEEDEXCHANGE", "contents": "RETURNVALUE_NEEDEXCHANGE" },
            { "trigger":"RETURNVALUE_CANNOTBEDRESSED", "contents": "RETURNVALUE_CANNOTBEDRESSED" },
            { "trigger":"RETURNVALUE_PUTTHISOBJECTINYOURHAND", "contents": "RETURNVALUE_PUTTHISOBJECTINYOURHAND" },
            { "trigger":"RETURNVALUE_PUTTHISOBJECTINBOTHHANDS", "contents": "RETURNVALUE_PUTTHISOBJECTINBOTHHANDS" },
            { "trigger":"RETURNVALUE_TOOFARAWAY", "contents": "RETURNVALUE_TOOFARAWAY" },
            { "trigger":"RETURNVALUE_FIRSTGODOWNSTAIRS", "contents": "RETURNVALUE_FIRSTGODOWNSTAIRS" },
            { "trigger":"RETURNVALUE_FIRSTGOUPSTAIRS", "contents": "RETURNVALUE_FIRSTGOUPSTAIRS" },
            { "trigger":"RETURNVALUE_CONTAINERNOTENOUGHROOM", "contents": "RETURNVALUE_CONTAINERNOTENOUGHROOM" },
            { "trigger":"RETURNVALUE_NOTENOUGHCAPACITY", "contents": "RETURNVALUE_NOTENOUGHCAPACITY" },
            { "trigger":"RETURNVALUE_CANNOTPICKUP", "contents": "RETURNVALUE_CANNOTPICKUP" },
            { "trigger":"RETURNVALUE_THISISIMPOSSIBLE", "contents": "RETURNVALUE_THISISIMPOSSIBLE" },
            { "trigger":"RETURNVALUE_DEPOTISFULL", "contents": "RETURNVALUE_DEPOTISFULL" },
            { "trigger":"RETURNVALUE_CREATUREDOESNOTEXIST", "contents": "RETURNVALUE_CREATUREDOESNOTEXIST" },
            { "trigger":"RETURNVALUE_CANNOTUSETHISOBJECT", "contents": "RETURNVALUE_CANNOTUSETHISOBJECT" },
            { "trigger":"RETURNVALUE_PLAYERWITHTHISNAMEISNOTONLINE", "contents": "RETURNVALUE_PLAYERWITHTHISNAMEISNOTONLINE" },
            { "trigger":"RETURNVALUE_NOTREQUIREDLEVELTOUSERUNE", "contents": "RETURNVALUE_NOTREQUIREDLEVELTOUSERUNE" },
            { "trigger":"RETURNVALUE_YOUAREALREADYTRADING", "contents": "RETURNVALUE_YOUAREALREADYTRADING" },
            { "trigger":"RETURNVALUE_THISPLAYERISALREADYTRADING", "contents": "RETURNVALUE_THISPLAYERISALREADYTRADING" },
            { "trigger":"RETURNVALUE_YOUMAYNOTLOGOUTDURINGAFIGHT", "contents": "RETURNVALUE_YOUMAYNOTLOGOUTDURINGAFIGHT" },
            { "trigger":"RETURNVALUE_DIRECTPLAYERSHOOT", "contents": "RETURNVALUE_DIRECTPLAYERSHOOT" },
            { "trigger":"RETURNVALUE_NOTENOUGHLEVEL", "contents": "RETURNVALUE_NOTENOUGHLEVEL" },
            { "trigger":"RETURNVALUE_NOTENOUGHMAGICLEVEL", "contents": "RETURNVALUE_NOTENOUGHMAGICLEVEL" },
            { "trigger":"RETURNVALUE_NOTENOUGHMANA", "contents": "RETURNVALUE_NOTENOUGHMANA" },
            { "trigger":"RETURNVALUE_NOTENOUGHSOUL", "contents": "RETURNVALUE_NOTENOUGHSOUL" },
            { "trigger":"RETURNVALUE_YOUAREEXHAUSTED", "contents": "RETURNVALUE_YOUAREEXHAUSTED" },
            { "trigger":"RETURNVALUE_PLAYERISNOTREACHABLE", "contents": "RETURNVALUE_PLAYERISNOTREACHABLE" },
            { "trigger":"RETURNVALUE_CANONLYUSETHISRUNEONCREATURES", "contents": "RETURNVALUE_CANONLYUSETHISRUNEONCREATURES" },
            { "trigger":"RETURNVALUE_ACTIONNOTPERMITTEDINPROTECTIONZONE", "contents": "RETURNVALUE_ACTIONNOTPERMITTEDINPROTECTIONZONE" },
            { "trigger":"RETURNVALUE_YOUMAYNOTATTACKTHISPLAYER", "contents": "RETURNVALUE_YOUMAYNOTATTACKTHISPLAYER" },
            { "trigger":"RETURNVALUE_YOUMAYNOTATTACKAPERSONINPROTECTIONZONE", "contents": "RETURNVALUE_YOUMAYNOTATTACKAPERSONINPROTECTIONZONE" },
            { "trigger":"RETURNVALUE_YOUMAYNOTATTACKAPERSONWHILEINPROTECTIONZONE", "contents": "RETURNVALUE_YOUMAYNOTATTACKAPERSONWHILEINPROTECTIONZONE" },
            { "trigger":"RETURNVALUE_YOUMAYNOTATTACKTHISCREATURE", "contents": "RETURNVALUE_YOUMAYNOTATTACKTHISCREATURE" },
            { "trigger":"RETURNVALUE_YOUCANONLYUSEITONCREATURES", "contents": "RETURNVALUE_YOUCANONLYUSEITONCREATURES" },
            { "trigger":"RETURNVALUE_CREATUREISNOTREACHABLE", "contents": "RETURNVALUE_CREATUREISNOTREACHABLE" },
            { "trigger":"RETURNVALUE_TURNSECUREMODETOATTACKUNMARKEDPLAYERS", "contents": "RETURNVALUE_TURNSECUREMODETOATTACKUNMARKEDPLAYERS" },
            { "trigger":"RETURNVALUE_YOUNEEDPREMIUMACCOUNT", "contents": "RETURNVALUE_YOUNEEDPREMIUMACCOUNT" },
            { "trigger":"RETURNVALUE_YOUNEEDTOLEARNTHISSPELL", "contents": "RETURNVALUE_YOUNEEDTOLEARNTHISSPELL" },
            { "trigger":"RETURNVALUE_YOURVOCATIONCANNOTUSETHISSPELL", "contents": "RETURNVALUE_YOURVOCATIONCANNOTUSETHISSPELL" },
            { "trigger":"RETURNVALUE_YOUNEEDAWEAPONTOUSETHISSPELL", "contents": "RETURNVALUE_YOUNEEDAWEAPONTOUSETHISSPELL" },
            { "trigger":"RETURNVALUE_PLAYERISPZLOCKEDLEAVEPVPZONE", "contents": "RETURNVALUE_PLAYERISPZLOCKEDLEAVEPVPZONE" },
            { "trigger":"RETURNVALUE_PLAYERISPZLOCKEDENTERPVPZONE", "contents": "RETURNVALUE_PLAYERISPZLOCKEDENTERPVPZONE" },
            { "trigger":"RETURNVALUE_ACTIONNOTPERMITTEDINANOPVPZONE", "contents": "RETURNVALUE_ACTIONNOTPERMITTEDINANOPVPZONE" },
            { "trigger":"RETURNVALUE_YOUCANNOTLOGOUTHERE", "contents": "RETURNVALUE_YOUCANNOTLOGOUTHERE" },
            { "trigger":"RETURNVALUE_YOUNEEDAMAGICITEMTOCASTSPELL", "contents": "RETURNVALUE_YOUNEEDAMAGICITEMTOCASTSPELL" },
            { "trigger":"RETURNVALUE_CANNOTCONJUREITEMHERE", "contents": "RETURNVALUE_CANNOTCONJUREITEMHERE" },
            { "trigger":"RETURNVALUE_YOUNEEDTOSPLITYOURSPEARS", "contents": "RETURNVALUE_YOUNEEDTOSPLITYOURSPEARS" },
            { "trigger":"RETURNVALUE_NAMEISTOOAMBIGIOUS", "contents": "RETURNVALUE_NAMEISTOOAMBIGIOUS" },
            { "trigger":"RETURNVALUE_CANONLYUSEONESHIELD", "contents": "RETURNVALUE_CANONLYUSEONESHIELD" },
            { "trigger":"RETURNVALUE_NOPARTYMEMBERSINRANGE", "contents": "RETURNVALUE_NOPARTYMEMBERSINRANGE" },
            { "trigger":"RETURNVALUE_YOUARENOTTHEOWNER", "contents": "RETURNVALUE_YOUARENOTTHEOWNER" },
            { "trigger":"configKeys.ALLOW_CHANGEOUTFIT", "contents": "configKeys.ALLOW_CHANGEOUTFIT" },
            { "trigger":"configKeys.CANNOT_ATTACK_SAME_LOOKFEET", "contents": "configKeys.CANNOT_ATTACK_SAME_LOOKFEET" },
            { "trigger":"configKeys.ONE_PLAYER_ON_ACCOUNT", "contents": "configKeys.ONE_PLAYER_ON_ACCOUNT" },
            { "trigger":"configKeys.AIMBOT_HOTKEY_ENABLED", "contents": "configKeys.AIMBOT_HOTKEY_ENABLED" },
            { "trigger":"configKeys.REMOVE_AMMO", "contents": "configKeys.REMOVE_AMMO" },
            { "trigger":"configKeys.REMOVE_RUNE_CHARGES", "contents": "configKeys.REMOVE_RUNE_CHARGES" },
            { "trigger":"configKeys.EXPERIENCE_FROM_PLAYERS", "contents": "configKeys.EXPERIENCE_FROM_PLAYERS" },
            { "trigger":"configKeys.FREE_PREMIUM", "contents": "configKeys.FREE_PREMIUM" },
            { "trigger":"configKeys.REPLACE_KICK_ON_LOGIN", "contents": "configKeys.REPLACE_KICK_ON_LOGIN" },
            { "trigger":"configKeys.ALLOW_CLONES", "contents": "configKeys.ALLOW_CLONES" },
            { "trigger":"configKeys.BIND_ONLY_GLOBAL_ADDRESS", "contents": "configKeys.BIND_ONLY_GLOBAL_ADDRESS" },
            { "trigger":"configKeys.OPTIMIZE_DATABASE", "contents": "configKeys.OPTIMIZE_DATABASE" },
            { "trigger":"configKeys.MARKET_PREMIUM", "contents": "configKeys.MARKET_PREMIUM" },
            { "trigger":"configKeys.EMOTE_SPELLS", "contents": "configKeys.EMOTE_SPELLS" },
            { "trigger":"configKeys.STAMINA_SYSTEM", "contents": "configKeys.STAMINA_SYSTEM" },
            { "trigger":"configKeys.WARN_UNSAFE_SCRIPTS", "contents": "configKeys.WARN_UNSAFE_SCRIPTS" },
            { "trigger":"configKeys.CONVERT_UNSAFE_SCRIPTS", "contents": "configKeys.CONVERT_UNSAFE_SCRIPTS" },
            { "trigger":"configKeys.MAP_NAME", "contents": "configKeys.MAP_NAME" },
            { "trigger":"configKeys.HOUSE_RENT_PERIOD", "contents": "configKeys.HOUSE_RENT_PERIOD" },
            { "trigger":"configKeys.SERVER_NAME", "contents": "configKeys.SERVER_NAME" },
            { "trigger":"configKeys.OWNER_NAME", "contents": "configKeys.OWNER_NAME" },
            { "trigger":"configKeys.OWNER_EMAIL", "contents": "configKeys.OWNER_EMAIL" },
            { "trigger":"configKeys.URL", "contents": "configKeys.URL" },
            { "trigger":"configKeys.LOCATION", "contents": "configKeys.LOCATION" },
            { "trigger":"configKeys.IP", "contents": "configKeys.IP" },
            { "trigger":"configKeys.MOTD", "contents": "configKeys.MOTD" },
            { "trigger":"configKeys.WORLD_TYPE", "contents": "configKeys.WORLD_TYPE" },
            { "trigger":"configKeys.MYSQL_HOST", "contents": "configKeys.MYSQL_HOST" },
            { "trigger":"configKeys.MYSQL_USER", "contents": "configKeys.MYSQL_USER" },
            { "trigger":"configKeys.MYSQL_PASS", "contents": "configKeys.MYSQL_PASS" },
            { "trigger":"configKeys.MYSQL_DB", "contents": "configKeys.MYSQL_DB" },
            { "trigger":"configKeys.MYSQL_SOCK", "contents": "configKeys.MYSQL_SOCK" },
            { "trigger":"configKeys.DEFAULT_PRIORITY", "contents": "configKeys.DEFAULT_PRIORITY" },
            { "trigger":"configKeys.MAP_AUTHOR", "contents": "configKeys.MAP_AUTHOR" },
            { "trigger":"configKeys.SQL_PORT", "contents": "configKeys.SQL_PORT" },
            { "trigger":"configKeys.MAX_PLAYERS", "contents": "configKeys.MAX_PLAYERS" },
            { "trigger":"configKeys.PZ_LOCKED", "contents": "configKeys.PZ_LOCKED" },
            { "trigger":"configKeys.DEFAULT_DESPAWNRANGE", "contents": "configKeys.DEFAULT_DESPAWNRANGE" },
            { "trigger":"configKeys.DEFAULT_DESPAWNRADIUS", "contents": "configKeys.DEFAULT_DESPAWNRADIUS" },
            { "trigger":"configKeys.RATE_EXPERIENCE", "contents": "configKeys.RATE_EXPERIENCE" },
            { "trigger":"configKeys.RATE_SKILL", "contents": "configKeys.RATE_SKILL" },
            { "trigger":"configKeys.RATE_LOOT", "contents": "configKeys.RATE_LOOT" },
            { "trigger":"configKeys.RATE_MAGIC", "contents": "configKeys.RATE_MAGIC" },
            { "trigger":"configKeys.RATE_SPAWN", "contents": "configKeys.RATE_SPAWN" },
            { "trigger":"configKeys.HOUSE_PRICE", "contents": "configKeys.HOUSE_PRICE" },
            { "trigger":"configKeys.KILLS_TO_RED", "contents": "configKeys.KILLS_TO_RED" },
            { "trigger":"configKeys.KILLS_TO_BLACK", "contents": "configKeys.KILLS_TO_BLACK" },
            { "trigger":"configKeys.MAX_MESSAGEBUFFER", "contents": "configKeys.MAX_MESSAGEBUFFER" },
            { "trigger":"configKeys.ACTIONS_DELAY_INTERVAL", "contents": "configKeys.ACTIONS_DELAY_INTERVAL" },
            { "trigger":"configKeys.EX_ACTIONS_DELAY_INTERVAL", "contents": "configKeys.EX_ACTIONS_DELAY_INTERVAL" },
            { "trigger":"configKeys.KICK_AFTER_MINUTES", "contents": "configKeys.KICK_AFTER_MINUTES" },
            { "trigger":"configKeys.PROTECTION_LEVEL", "contents": "configKeys.PROTECTION_LEVEL" },
            { "trigger":"configKeys.DEATH_LOSE_PERCENT", "contents": "configKeys.DEATH_LOSE_PERCENT" },
            { "trigger":"configKeys.STATUSQUERY_TIMEOUT", "contents": "configKeys.STATUSQUERY_TIMEOUT" },
            { "trigger":"configKeys.FRAG_TIME", "contents": "configKeys.FRAG_TIME" },
            { "trigger":"configKeys.WHITE_SKULL_TIME", "contents": "configKeys.WHITE_SKULL_TIME" },
            { "trigger":"configKeys.GAME_PORT", "contents": "configKeys.GAME_PORT" },
            { "trigger":"configKeys.LOGIN_PORT", "contents": "configKeys.LOGIN_PORT" },
            { "trigger":"configKeys.STATUS_PORT", "contents": "configKeys.STATUS_PORT" },
            { "trigger":"configKeys.STAIRHOP_DELAY", "contents": "configKeys.STAIRHOP_DELAY" },
            { "trigger":"configKeys.MARKET_OFFER_DURATION", "contents": "configKeys.MARKET_OFFER_DURATION" },
            { "trigger":"configKeys.CHECK_EXPIRED_MARKET_OFFERS_EACH_MINUTES", "contents": "configKeys.CHECK_EXPIRED_MARKET_OFFERS_EACH_MINUTES" },
            { "trigger":"configKeys.MAX_MARKET_OFFERS_AT_A_TIME_PER_PLAYER", "contents": "configKeys.MAX_MARKET_OFFERS_AT_A_TIME_PER_PLAYER" },
            { "trigger":"configKeys.EXP_FROM_PLAYERS_LEVEL_RANGE", "contents": "configKeys.EXP_FROM_PLAYERS_LEVEL_RANGE" },
            { "trigger":"configKeys.MAX_PACKETS_PER_SECOND", "contents": "configKeys.MAX_PACKETS_PER_SECOND" },
            { "trigger":"INDEX_WHEREEVER", "contents": "INDEX_WHEREEVER" },
            { "trigger":"VIRTUAL_PARENT", "contents": "VIRTUAL_PARENT" },
           
     
     
       ]
    }

